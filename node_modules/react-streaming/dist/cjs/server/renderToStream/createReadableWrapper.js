"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createReadableWrapper = void 0;
const createBuffer_1 = require("./createBuffer");
// `readableFromReact` is the readable stream provided by React
// `readableForUser` is the readable stream we give to the user (the wrapper)
// Essentially: what React writes to `readableFromReact` is forwarded to `readableForUser`
function createReadableWrapper(readableFromReact) {
    const streamOperations = {
        operations: null
    };
    let controllerOfUserStream;
    let onEnded;
    const streamEnd = new Promise((r) => {
        onEnded = () => r();
    });
    const readableForUser = new ReadableStream({
        start(controller) {
            controllerOfUserStream = controller;
            onReady(onEnded);
        }
    });
    const { injectToStream, onBeforeWrite, onBeforeEnd } = (0, createBuffer_1.createBuffer)(streamOperations);
    return { readableForUser, streamEnd, injectToStream };
    async function onReady(onEnded) {
        streamOperations.operations = {
            writeChunk(chunk) {
                controllerOfUserStream.enqueue(encodeForWebStream(chunk));
            },
            flush: null
        };
        const reader = readableFromReact.getReader();
        while (true) {
            let result;
            try {
                result = await reader.read();
            }
            catch (err) {
                controllerOfUserStream.close();
                throw err;
            }
            const { value, done } = result;
            if (done) {
                break;
            }
            onBeforeWrite(value);
            streamOperations.operations.writeChunk(value);
        }
        // Collect `injectToStream()` calls stuck in an async call
        setTimeout(() => {
            onBeforeEnd();
            controllerOfUserStream.close();
            onEnded();
        }, 0);
    }
}
exports.createReadableWrapper = createReadableWrapper;
let encoder;
function encodeForWebStream(thing) {
    if (!encoder) {
        encoder = new TextEncoder();
    }
    if (typeof thing === 'string') {
        return encoder.encode(thing);
    }
    return thing;
}
