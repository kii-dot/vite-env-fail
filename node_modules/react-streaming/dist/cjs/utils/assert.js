"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProjectError = exports.assertInfo = exports.assertWarning = exports.assertUsage = exports.assert = void 0;
const createErrorWithCleanStackTrace_1 = require("./createErrorWithCleanStackTrace");
const projectInfo_1 = require("./projectInfo");
const errorPrefix = `[${projectInfo_1.projectInfo.npmPackageName}@${projectInfo_1.projectInfo.projectVersion}]`;
const internalErrorPrefix = `${errorPrefix}[Bug]`;
const usageErrorPrefix = `${errorPrefix}[Wrong Usage]`;
const warningPrefix = `${errorPrefix}[Warning]`;
const infoPrefix = `${errorPrefix}[Info]`;
const numberOfStackTraceLinesToRemove = 2;
function assert(condition, debugInfo) {
    if (condition) {
        return;
    }
    const debugStr = (() => {
        if (!debugInfo) {
            return '';
        }
        const debugInfoSerialized = typeof debugInfo === 'string' ? debugInfo : '`' + JSON.stringify(debugInfo) + '`';
        return `Debug info (this is for the ${projectInfo_1.projectInfo.projectName} maintainers; you can ignore this): ${debugInfoSerialized}.`;
    })();
    const internalError = (0, createErrorWithCleanStackTrace_1.createErrorWithCleanStackTrace)([
        `${internalErrorPrefix} You stumbled upon a bug in ${projectInfo_1.projectInfo.projectName}'s source code.`,
        `Reach out at ${projectInfo_1.projectInfo.githubRepository}/issues/new and include this error stack (the error stack is usually enough to fix the problem).`,
        'A maintainer will fix the bug (usually under 24 hours).',
        `Do not hesitate to reach out as it makes ${projectInfo_1.projectInfo.projectName} more robust.`,
        debugStr
    ].join(' '), numberOfStackTraceLinesToRemove);
    throw internalError;
}
exports.assert = assert;
function assertUsage(condition, errorMessage) {
    if (condition) {
        return;
    }
    const whiteSpace = errorMessage.startsWith('[') ? '' : ' ';
    const usageError = (0, createErrorWithCleanStackTrace_1.createErrorWithCleanStackTrace)(`${usageErrorPrefix}${whiteSpace}${errorMessage}`, numberOfStackTraceLinesToRemove);
    throw usageError;
}
exports.assertUsage = assertUsage;
function getProjectError(errorMessage) {
    const pluginError = (0, createErrorWithCleanStackTrace_1.createErrorWithCleanStackTrace)(`${errorPrefix} ${errorMessage}`, numberOfStackTraceLinesToRemove);
    return pluginError;
}
exports.getProjectError = getProjectError;
let alreadyLogged = new Set();
function assertWarning(condition, errorMessage, { onlyOnce, showStackTrace }) {
    if (condition) {
        return;
    }
    const msg = `${warningPrefix} ${errorMessage}`;
    if (onlyOnce) {
        const key = onlyOnce === true ? msg : onlyOnce;
        if (alreadyLogged.has(key)) {
            return;
        }
        else {
            alreadyLogged.add(key);
        }
    }
    if (showStackTrace) {
        console.warn(new Error(msg));
    }
    else {
        console.warn(msg);
    }
}
exports.assertWarning = assertWarning;
function assertInfo(condition, errorMessage, { onlyOnce }) {
    if (condition) {
        return;
    }
    const msg = `${infoPrefix} ${errorMessage}`;
    if (onlyOnce) {
        const key = msg;
        if (alreadyLogged.has(key)) {
            return;
        }
        else {
            alreadyLogged.add(key);
        }
    }
    console.log(msg);
}
exports.assertInfo = assertInfo;
