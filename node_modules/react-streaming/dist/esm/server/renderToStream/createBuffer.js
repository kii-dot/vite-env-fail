export { createBuffer };
import { assert, assertUsage, createDebugger } from '../utils';
const debug = createDebugger('react-streaming:buffer');
function createBuffer(streamOperations) {
    const buffer = [];
    let state = 'UNSTARTED';
    let writePermission = null; // Set to `null` because React fails to hydrate if something is injected before the first react write
    return { injectToStream, onBeforeWrite, onBeforeEnd };
    function injectToStream(chunk, options) {
        assertUsage(state !== 'ENDED', `Cannot inject following chunk after stream has ended: \`${chunk}\``);
        if (debug.isEnabled) {
            debug('injectToStream()', String(chunk));
        }
        buffer.push({ chunk, flush: options === null || options === void 0 ? void 0 : options.flush });
        flushBuffer();
    }
    function flushBuffer() {
        if (!writePermission) {
            return;
        }
        if (buffer.length === 0) {
            return;
        }
        if (state !== 'STREAMING') {
            assert(state === 'UNSTARTED');
            return;
        }
        let flushStream = false;
        buffer.forEach((bufferEntry) => {
            assert(streamOperations.operations);
            const { writeChunk } = streamOperations.operations;
            writeChunk(bufferEntry.chunk);
            if (bufferEntry.flush) {
                flushStream = true;
            }
        });
        buffer.length = 0;
        assert(streamOperations.operations);
        if (flushStream && streamOperations.operations.flush !== null) {
            streamOperations.operations.flush();
            debug('stream flushed');
        }
    }
    function onBeforeWrite(chunk) {
        state === 'UNSTARTED' && debug('>>> START');
        if (debug.isEnabled) {
            debug(`react write${!writePermission ? '' : ' (allowed)'}`, String(chunk));
        }
        state = 'STREAMING';
        if (writePermission) {
            flushBuffer();
        }
        if (writePermission == true || writePermission === null) {
            writePermission = false;
            debug('writePermission =', writePermission);
            setTimeout(() => {
                debug('>>> setTimeout()');
                writePermission = true;
                debug('writePermission =', writePermission);
                flushBuffer();
            });
        }
    }
    function onBeforeEnd() {
        writePermission = true;
        debug('writePermission =', writePermission);
        flushBuffer();
        assert(buffer.length === 0);
        state = 'ENDED';
        debug('>>> END');
    }
}
