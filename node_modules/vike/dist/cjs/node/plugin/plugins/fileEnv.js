"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fileEnv = void 0;
const utils_js_1 = require("../utils.js");
const extractAssetsPlugin_js_1 = require("./extractAssetsPlugin.js");
const extractExportNamesPlugin_js_1 = require("./extractExportNamesPlugin.js");
const picocolors_1 = __importDefault(require("@brillout/picocolors"));
function fileEnv() {
    let config;
    let isDev = false;
    return {
        name: 'vike:fileEnv',
        // - We need to set `enforce: 'pre'` because, otherwise, the resolvedId() hook of Vite's internal plugin `vite:resolve` is called before and it doesn't seem to call `this.resolve()` which means that the resolveId() hook below is never called.
        //   - Vite's `vite:resolve` plugin: https://github.com/vitejs/vite/blob/d649daba7682791178b711d9a3e44a6b5d00990c/packages/vite/src/node/plugins/resolve.ts#L105
        // - It's actually a good thing if the resolveId() hook below is the first one to be called because it doesn't actually resolve any ID, so all other resolveId() hooks will be called as normal. And with `this.resolve()` we get the information we want from all other resolvedId() hooks.
        // - Path aliases are already resolved, even when using `enforce: 'pre'`. For example:
        //   ```js
        //   // /pages/index/+Page.tsx
        //
        //   // The value of `source` is `/home/rom/code/vike/examples/path-aliases/components/Counter` (instead of `#root/components/Counter`)
        //   // The value of `importer` is `/home/rom/code/vike/examples/path-aliases/pages/index/+Page.tsx`
        //   import { Counter } from '#root/components/Counter'
        //   ```
        enforce: 'pre',
        resolveId: {
            /* I don't know why, but path aliases aren't resolved anymore when setting `order: 'pre'`. (In principle, I'd assume that `this.resolve()` would resolve the alias but it doesn't.)
            order: 'pre',
            */
            async handler(source, importer, options) {
                // TODO/v1-release: remove
                if (extractAssetsPlugin_js_1.extractAssetsRE.test(source) || extractExportNamesPlugin_js_1.extractExportNamesRE.test(source))
                    return;
                // Seems like Vite is doing some funky stuff here.
                if (importer?.endsWith('.html'))
                    return;
                const resolved = await this.resolve(source, importer, {
                    // Needed for old Vite plugins: https://vitejs.dev/guide/migration#rollup-4:~:text=For%20Vite%20plugins%2C%20this.resolve%20skipSelf%20option%20is%20now%20true%20by%20default.
                    skipSelf: true,
                    ...options
                });
                // resolved is null when import path is erroneous and doesn't actually point to a file
                if (!resolved)
                    return;
                const modulePath = resolved.id.split('?')[0];
                // `.server.js` and `.client.js` should only apply to user files
                if (modulePath.includes('/node_modules/'))
                    return;
                // TODO/v1-release: remove
                if (modulePath.endsWith('.css'))
                    return;
                const isServerSide = options?.ssr;
                const envActual = isServerSide ? 'server' : 'client';
                const envExpect = isServerSide ? 'client' : 'server';
                const suffix = `.${envExpect}.`;
                // Everything nonimal
                if (!modulePath.includes(suffix))
                    return;
                // Show error message
                let errMsg;
                let modulePathPretty = (0, utils_js_1.getFilePathRelativeToUserRootDir)(modulePath, config.root);
                modulePathPretty = modulePathPretty.replaceAll(suffix, picocolors_1.default.bold(suffix));
                errMsg = `${(0, utils_js_1.capitalizeFirstLetter)(envExpect)}-only module ${modulePathPretty} (https://vike.dev/file-env) imported on the ${envActual}-side`;
                if (importer &&
                    // Don't show Vike's virtual modules that import the entry plus files such as /pages/about/+Page.js
                    !importer.includes('virtual:vike:') &&
                    // I don't know why and who sets importer to '<stdin>' (I guess Vite?)
                    importer !== '<stdin>') {
                    const importerPath = (0, utils_js_1.getFilePathRelativeToUserRootDir)(importer.split('?')[0], config.root);
                    errMsg += ` by ${importerPath}`;
                }
                if (isDev) {
                    errMsg += ' (building your app for production will be prevented and an error will be thrown)';
                }
                errMsg += '.';
                if (isDev) {
                    (0, utils_js_1.assertWarning)(false, errMsg, { onlyOnce: true });
                }
                else {
                    (0, utils_js_1.assertUsage)(false, errMsg);
                }
            }
        },
        configResolved(config_) {
            config = config_;
        },
        configureServer() {
            isDev = true;
        },
        // Ensure this plugin works
        transform(_code, id, options) {
            if (isDev)
                return;
            // TODO/v1-release: remove
            if (extractAssetsPlugin_js_1.extractAssetsRE.test(id) || extractExportNamesPlugin_js_1.extractExportNamesRE.test(id))
                return;
            if (id.split('?')[0].endsWith('.css'))
                return;
            const isServerSide = options?.ssr;
            const envWrong = isServerSide ? 'client' : 'server';
            (0, utils_js_1.assert)(!id.includes(`.${envWrong}.`));
        }
    };
}
exports.fileEnv = fileEnv;
