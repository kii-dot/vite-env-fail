"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.importBuild = void 0;
const plugin_js_1 = require("@brillout/vite-plugin-import-build/plugin.js");
const utils_js_1 = require("../../utils.js");
const path_1 = __importDefault(require("path"));
const module_1 = require("module");
const getConfigVike_js_1 = require("../../../shared/getConfigVike.js");
const getVikeManifest_js_1 = require("./getVikeManifest.js");
const promises_1 = __importDefault(require("fs/promises"));
const virtualFileImportUserCode_js_1 = require("../../../shared/virtual-files/virtualFileImportUserCode.js");
// @ts-ignore Shimmed by dist-cjs-fixup.js for CJS build.
const importMetaUrl = `file://${__filename}`;
const require_ = (0, module_1.createRequire)(importMetaUrl);
const ASSETS_MAP = '__VITE_ASSETS_MAP__';
function importBuild() {
    let config;
    let configVike;
    return [
        {
            name: 'vike:importBuild:config',
            enforce: 'post',
            async configResolved(config_) {
                config = config_;
                configVike = await (0, getConfigVike_js_1.getConfigVike)(config);
            },
            async writeBundle(options, bundle) {
                if (!(0, utils_js_1.viteIsSSR)(config))
                    return;
                await replace_ASSETS_MAP(options, bundle);
            }
        },
        (0, plugin_js_1.importBuild)({
            getImporterCode: () => {
                return getEntryCode(config, configVike);
            },
            libraryName: utils_js_1.projectInfo.projectName
        })
    ];
}
exports.importBuild = importBuild;
function getEntryCode(config, configVike) {
    const importPath = getImportPath(config);
    const vikeManifest = (0, getVikeManifest_js_1.getVikeManifest)(config, configVike);
    const importerCode = [
        `  import { setImportBuildGetters } from '${importPath}';`,
        `  import * as pageFiles from '${virtualFileImportUserCode_js_1.virtualFileIdImportUserCodeServer}';`,
        `  {`,
        // We first set the values to a variable because of a Rollup bug, and this workaround doesn't work: https://github.com/vikejs/vike/commit/d5f3a4f7aae5a8bc44192e6cbb2bcb9007be188d
        `    const clientManifest = ${ASSETS_MAP};`,
        `    const pluginManifest = ${JSON.stringify(vikeManifest, null, 2)};`,
        '    setImportBuildGetters({',
        `      pageFiles: () => pageFiles,`,
        // TODO: rename clientManifest -> assetManifest
        `      clientManifest: () => clientManifest,`,
        // TODO: rename pluginManifest -> vikeManifest
        `      pluginManifest: () => pluginManifest,`,
        '    });',
        `  }`,
        ''
    ].join('\n');
    return importerCode;
}
async function replace_ASSETS_MAP(options, bundle) {
    const { dir } = options;
    (0, utils_js_1.assert)(dir);
    // I guess importBuild won't be found in the bundle when using @vitejs/plugin-legacy
    const importBuildEntry = (0, plugin_js_1.findImportBuildBundleEntry)(bundle);
    const importBuildFilePath = path_1.default.join(dir, importBuildEntry.fileName);
    const assetsJsonFilePath = path_1.default.join(dir, '..', 'assets.json');
    const [assetsJsonString, importBuildFileContent] = await Promise.all([
        await promises_1.default.readFile(assetsJsonFilePath, 'utf8'),
        await promises_1.default.readFile(importBuildFilePath, 'utf8')
    ]);
    const importBuildFileContentFixed = importBuildFileContent.replace(ASSETS_MAP, assetsJsonString);
    (0, utils_js_1.assert)(importBuildFileContentFixed !== importBuildFileContent);
    await promises_1.default.writeFile(importBuildFilePath, importBuildFileContentFixed);
}
function getImportPath(config) {
    // We resolve filePathAbsolute even if we don't use it: we use require.resolve() as an assertion that the relative path is correct
    const filePathAbsolute = (0, utils_js_1.toPosixPath)(
    // [RELATIVE_PATH_FROM_DIST] Current file: node_modules/vike/dist/esm/node/plugin/plugins/importBuild/index.js
    require_.resolve(`../../../../../../dist/esm/node/runtime/globalContext/loadImportBuild.js`));
    if (
    // Let's implement a new config if a user needs the import to be a relative path instead of 'vike/__internal/loadImportBuild' (AFAIK a relative path is needed only if a framework has npm package 'vike' as direct dependency instead of a peer dependency and if the user of that framework uses pnpm)
    true) {
        return 'vike/__internal/loadImportBuild';
    }
    else {
        const { outDirServer } = (0, utils_js_1.getOutDirs)(config);
        const filePathRelative = path_1.default.posix.relative(outDirServer, filePathAbsolute);
        return filePathRelative;
    }
}
