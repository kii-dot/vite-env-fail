"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertConfigValueIsSerializable = exports.getConfigValuesSerialized = void 0;
const utils_js_1 = require("../../../utils.js");
const stringify_1 = require("@brillout/json-serializer/stringify");
const picocolors_1 = __importDefault(require("@brillout/picocolors"));
const helpers_js_1 = require("../../../../../shared/page-configs/helpers.js");
const serializeConfigValue_js_1 = require("../../../../../shared/page-configs/serialize/serializeConfigValue.js");
const getConfigValueSourcesNotOverriden_js_1 = require("../../../shared/getConfigValueSourcesNotOverriden.js");
function getConfigValuesSerialized(pageConfig, isEnvMatch) {
    const lines = [];
    Object.entries(pageConfig.configValuesComputed).forEach(([configName, configValuesComputed]) => {
        const { value, configEnv } = configValuesComputed;
        if (!isEnvMatch(configEnv))
            return;
        // configValeSources has higher precedence
        if (pageConfig.configValueSources[configName])
            return;
        const configValue = pageConfig.configValues[configName];
        (0, utils_js_1.assert)(configValue);
        const { definedAt } = configValue;
        const valueSerialized = getConfigValueSerialized(value, configName, definedAt);
        (0, serializeConfigValue_js_1.serializeConfigValue)(lines, configName, { definedAt, valueSerialized });
    });
    (0, getConfigValueSourcesNotOverriden_js_1.getConfigValueSourcesNotOverriden)(pageConfig).forEach((configValueSource) => {
        const { configName, configEnv } = configValueSource;
        const configValue = pageConfig.configValues[configName];
        if (!configValue)
            return;
        if (!isEnvMatch(configEnv, configValueSource)) {
            return;
        }
        const { value, definedAt } = configValue;
        const valueSerialized = getConfigValueSerialized(value, configName, definedAt);
        (0, serializeConfigValue_js_1.serializeConfigValue)(lines, configName, { definedAt, valueSerialized });
    });
    const code = lines.join('\n');
    return code;
}
exports.getConfigValuesSerialized = getConfigValuesSerialized;
function assertConfigValueIsSerializable(value, configName, definedAt) {
    // Contains asserts
    getConfigValueSerialized(value, configName, definedAt);
}
exports.assertConfigValueIsSerializable = assertConfigValueIsSerializable;
function getConfigValueSerialized(value, configName, definedAt) {
    const valueName = `config${(0, utils_js_1.getPropAccessNotation)(configName)}`;
    let configValueSerialized;
    try {
        configValueSerialized = (0, stringify_1.stringify)(value, { valueName, forbidReactElements: true });
    }
    catch (err) {
        /*
        let serializationErrMsg = ''
        if (isJsonSerializerError(err)) {
          serializationErrMsg = err.messageCore
        } else {
          // When a property getter throws an error
          console.error('Serialization error:')
          console.error(err)
          serializationErrMsg = 'see serialization error printed above'
        }
        */
        const configValueFilePathToShowToUser = (0, helpers_js_1.getConfigValueFilePathToShowToUser)({ definedAt });
        (0, utils_js_1.assert)(configValueFilePathToShowToUser);
        (0, utils_js_1.assertUsage)(false, [
            `The code of ${picocolors_1.default.cyan(configName)} cannot live inside ${configValueFilePathToShowToUser},`,
            'see https://vike.dev/header-file#runtime-code'
            /* I guess showing this is more confusing than adding value.
            `(technically speaking: the value of ${pc.cyan(
              configName
            )} isn't serializable (${serializationErrMsg}) and it's therefore runtime code that needs to be imported).`
            //*/
        ].join(' '));
    }
    configValueSerialized = JSON.stringify(configValueSerialized);
    return configValueSerialized;
}
