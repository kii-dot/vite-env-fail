"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isVikeConfigFile = exports.vikeConfigDependencies = exports.reloadVikeConfig = exports.getVikeConfig = void 0;
const utils_js_1 = require("../../../utils.js");
const path_1 = __importDefault(require("path"));
const configDefinitionsBuiltIn_js_1 = require("./getVikeConfig/configDefinitionsBuiltIn.js");
const filesystemRouting_js_1 = require("./getVikeConfig/filesystemRouting.js");
const transpileAndExecuteFile_js_1 = require("./transpileAndExecuteFile.js");
const replaceImportStatements_js_1 = require("./replaceImportStatements.js");
const isConfigInvalid_js_1 = require("../../../../runtime/renderPage/isConfigInvalid.js");
const globalContext_js_1 = require("../../../../runtime/globalContext.js");
const loggerNotProd_js_1 = require("../../../shared/loggerNotProd.js");
const removeSuperfluousViteLog_js_1 = require("../../../shared/loggerVite/removeSuperfluousViteLog.js");
const picocolors_1 = __importDefault(require("@brillout/picocolors"));
const helpers_js_1 = require("../../../../../shared/page-configs/helpers.js");
const assertExports_js_1 = require("../../../../../shared/page-configs/assertExports.js");
const getConfigVike_js_1 = require("../../../../shared/getConfigVike.js");
const getConfigValuesSerialized_js_1 = require("./getConfigValuesSerialized.js");
const crawlPlusFiles_js_1 = require("./getVikeConfig/crawlPlusFiles.js");
(0, utils_js_1.assertIsNotProductionRuntime)();
let devServerIsCorrupt = false;
let wasConfigInvalid = null;
let vikeConfigPromise = null;
const vikeConfigDependencies = new Set();
exports.vikeConfigDependencies = vikeConfigDependencies;
const filesEnv = new Map();
function reloadVikeConfig(userRootDir, outDirRoot, extensions) {
    vikeConfigDependencies.clear();
    filesEnv.clear();
    vikeConfigPromise = loadVikeConfig_withErrorHandling(userRootDir, outDirRoot, true, extensions, true);
    handleReloadSideEffects();
}
exports.reloadVikeConfig = reloadVikeConfig;
async function handleReloadSideEffects() {
    wasConfigInvalid = isConfigInvalid_js_1.isConfigInvalid;
    const vikeConfigPromisePrevious = vikeConfigPromise;
    try {
        await vikeConfigPromise;
    }
    catch (err) {
        // handleReloadSideEffects() is only called in dev.
        // In dev, if loadVikeConfig_withErrorHandling() throws an error, then it's a vike bug.
        console.error(err);
        (0, utils_js_1.assert)(false);
    }
    if (vikeConfigPromise !== vikeConfigPromisePrevious) {
        // Let the next handleReloadSideEffects() call handle side effects
        return;
    }
    if (!isConfigInvalid_js_1.isConfigInvalid) {
        if (wasConfigInvalid) {
            wasConfigInvalid = false;
            (0, loggerNotProd_js_1.logConfigErrorRecover)();
        }
        if (devServerIsCorrupt) {
            devServerIsCorrupt = false;
            const viteDevServer = (0, globalContext_js_1.getViteDevServer)();
            (0, utils_js_1.assert)(viteDevServer);
            (0, removeSuperfluousViteLog_js_1.removeSuperfluousViteLog_enable)();
            await viteDevServer.restart(true);
            (0, removeSuperfluousViteLog_js_1.removeSuperfluousViteLog_disable)();
        }
    }
}
async function getVikeConfig(config, isDev, tolerateInvalidConfig = false, extensions) {
    const { outDirRoot } = (0, utils_js_1.getOutDirs)(config);
    const userRootDir = config.root;
    if (!vikeConfigPromise) {
        vikeConfigPromise = loadVikeConfig_withErrorHandling(userRootDir, outDirRoot, isDev, extensions ?? (await (0, getConfigVike_js_1.getConfigVike)(config)).extensions, tolerateInvalidConfig);
    }
    return await vikeConfigPromise;
}
exports.getVikeConfig = getVikeConfig;
async function loadInterfaceFiles(userRootDir, outDirRoot, isDev, extensions) {
    const plusFiles = await findPlusFiles(userRootDir, outDirRoot, isDev, extensions);
    const configFiles = [];
    const valueFiles = [];
    plusFiles.forEach((f) => {
        if (getConfigName(f.filePathAbsoluteFilesystem) === 'config') {
            configFiles.push(f);
        }
        else {
            valueFiles.push(f);
        }
    });
    let interfaceFilesByLocationId = {};
    // Config files
    await Promise.all(configFiles.map(async (filePath) => {
        const { configFile, extendsConfigs } = await loadConfigFile(filePath, userRootDir, []);
        const interfaceFile = getInterfaceFileFromConfigFile(configFile, false);
        const locationId = (0, filesystemRouting_js_1.getLocationId)(filePath.filePathAbsoluteVite);
        interfaceFilesByLocationId[locationId] = interfaceFilesByLocationId[locationId] ?? [];
        interfaceFilesByLocationId[locationId].push(interfaceFile);
        extendsConfigs.forEach((extendsConfig) => {
            const interfaceFile = getInterfaceFileFromConfigFile(extendsConfig, true);
            interfaceFilesByLocationId[locationId].push(interfaceFile);
        });
    }));
    // Value files
    await Promise.all(valueFiles.map(async (filePath) => {
        const configName = getConfigName(filePath.filePathAbsoluteVite);
        (0, utils_js_1.assert)(configName);
        const interfaceFile = {
            filePath,
            configMap: {
                [configName]: {}
            },
            isConfigFile: false,
            isValueFile: true,
            configName
        };
        {
            // We don't have access to the custom config definitions defined by the user yet.
            //  - If `configDef` is `undefined` => we load the file +{configName}.js later.
            //  - We already need to load +meta.js here (to get the custom config definitions defined by the user)
            const configDef = getConfigDefinitionOptional(configDefinitionsBuiltIn_js_1.configDefinitionsBuiltIn, configName);
            if (configDef && isConfigEnv(configDef, configName)) {
                await loadValueFile(interfaceFile, configName, userRootDir);
            }
        }
        {
            const locationId = (0, filesystemRouting_js_1.getLocationId)(filePath.filePathAbsoluteVite);
            interfaceFilesByLocationId[locationId] = interfaceFilesByLocationId[locationId] ?? [];
            interfaceFilesByLocationId[locationId].push(interfaceFile);
        }
    }));
    assertAllConfigsAreKnown(interfaceFilesByLocationId);
    return interfaceFilesByLocationId;
}
function getConfigDefinition(configDefinitionsRelevant, configName, filePathToShowToUser) {
    const configDef = configDefinitionsRelevant[configName];
    assertConfigExists(configName, Object.keys(configDefinitionsRelevant), filePathToShowToUser);
    (0, utils_js_1.assert)(configDef);
    return configDef;
}
function getConfigDefinitionOptional(configDefinitions, configName) {
    return configDefinitions[configName] ?? null;
}
async function loadValueFile(interfaceValueFile, configName, userRootDir) {
    const { fileExports } = await (0, transpileAndExecuteFile_js_1.transpileAndExecuteFile)(interfaceValueFile.filePath, true, userRootDir);
    const { filePathToShowToUser } = interfaceValueFile.filePath;
    (0, assertExports_js_1.assertExportsOfValueFile)(fileExports, filePathToShowToUser, configName);
    Object.entries(fileExports).forEach(([exportName, configValue]) => {
        const configName_ = exportName === 'default' ? configName : exportName;
        interfaceValueFile.configMap[configName_] = { configValue };
    });
}
async function loadImportedFile(filePath, userRootDir, importedFilesLoaded) {
    const f = filePath.filePathAbsoluteFilesystem;
    if (!importedFilesLoaded[f]) {
        importedFilesLoaded[f] = (0, transpileAndExecuteFile_js_1.transpileAndExecuteFile)(filePath, true, userRootDir).then((r) => r.fileExports);
    }
    const fileExports = await importedFilesLoaded[f];
    return fileExports;
}
function isConfigEnv(configDef, configName) {
    const configEnv = configDef.env;
    if (configDef.cumulative) {
        // In principle we could lift that requirement (but it requires non-trivial modifications)
        (0, utils_js_1.assertUsage)(configEnv.config, `Config ${picocolors_1.default.cyan(configName)} needs its ${picocolors_1.default.cyan('env')} to have ${picocolors_1.default.cyan('{ config: true }')} (because ${picocolors_1.default.cyan(configName)} is a ${picocolors_1.default.cyan('cumulative')} config)`);
    }
    return !!configEnv.config;
}
function getInterfaceFileFromConfigFile(configFile, isConfigExtend) {
    const { fileExports, filePath, extendsFilePaths } = configFile;
    const interfaceFile = {
        filePath,
        configMap: {},
        isConfigFile: true,
        isValueFile: false,
        isConfigExtend,
        extendsFilePaths
    };
    const { filePathToShowToUser } = filePath;
    (0, assertExports_js_1.assertExportsOfConfigFile)(fileExports, filePathToShowToUser);
    Object.entries(fileExports.default).forEach(([configName, configValue]) => {
        interfaceFile.configMap[configName] = { configValue };
    });
    return interfaceFile;
}
/** Show error message upon unknown config */
function assertAllConfigsAreKnown(interfaceFilesByLocationId) {
    Object.entries(interfaceFilesByLocationId).forEach(([locationId, interfaceFiles]) => {
        const interfaceFilesRelevant = getInterfaceFilesRelevant(interfaceFilesByLocationId, locationId);
        const configDefinitionsRelevant = getConfigDefinitions(interfaceFilesRelevant);
        interfaceFiles.forEach((interfaceFile) => {
            Object.keys(interfaceFile.configMap).forEach((configName) => {
                assertConfigExists(configName, Object.keys(configDefinitionsRelevant), interfaceFile.filePath.filePathToShowToUser);
            });
        });
    });
}
async function loadVikeConfig_withErrorHandling(userRootDir, outDirRoot, isDev, extensions, tolerateInvalidConfig) {
    let hasError = false;
    let ret;
    let err;
    try {
        ret = await loadVikeConfig(userRootDir, outDirRoot, isDev, extensions);
    }
    catch (err_) {
        hasError = true;
        err = err_;
    }
    if (!hasError) {
        (0, utils_js_1.assert)(ret);
        (0, utils_js_1.assert)(err === undefined);
        (0, isConfigInvalid_js_1.isConfigInvalid_set)(false);
        return ret;
    }
    else {
        (0, utils_js_1.assert)(ret === undefined);
        (0, utils_js_1.assert)(err);
        (0, isConfigInvalid_js_1.isConfigInvalid_set)(true);
        if (!isDev) {
            (0, utils_js_1.assert)((0, globalContext_js_1.getViteDevServer)() === null);
            throw err;
        }
        else {
            (0, loggerNotProd_js_1.logConfigError)(err);
            if (!tolerateInvalidConfig) {
                devServerIsCorrupt = true;
            }
            const dummyData = {
                pageConfigs: [],
                pageConfigGlobal: {
                    configValueSources: {}
                },
                globalVikeConfig: {}
            };
            return dummyData;
        }
    }
}
async function loadVikeConfig(userRootDir, outDirRoot, isDev, extensions) {
    const interfaceFilesByLocationId = await loadInterfaceFiles(userRootDir, outDirRoot, isDev, extensions);
    const importedFilesLoaded = {};
    const { globalVikeConfig, pageConfigGlobal } = await getGlobalConfigs(interfaceFilesByLocationId, userRootDir, importedFilesLoaded);
    const pageConfigs = await Promise.all(Object.entries(interfaceFilesByLocationId)
        .filter(([_pageId, interfaceFiles]) => isDefiningPage(interfaceFiles))
        .map(async ([locationId]) => {
        const interfaceFilesRelevant = getInterfaceFilesRelevant(interfaceFilesByLocationId, locationId);
        const configDefinitionsRelevant = getConfigDefinitions(interfaceFilesRelevant);
        // Load value files of custom config-only configs
        await Promise.all(getInterfaceFileList(interfaceFilesRelevant).map(async (interfaceFile) => {
            if (!interfaceFile.isValueFile)
                return;
            const { configName } = interfaceFile;
            if (isGlobalConfig(configName))
                return;
            const configDef = getConfigDefinition(configDefinitionsRelevant, configName, interfaceFile.filePath.filePathToShowToUser);
            if (!isConfigEnv(configDef, configName))
                return;
            const isAlreadyLoaded = interfacefileIsAlreaydLoaded(interfaceFile);
            if (isAlreadyLoaded)
                return;
            // Value files of built-in configs should have already been loaded at loadInterfaceFiles()
            (0, utils_js_1.assert)(!(configName in configDefinitionsBuiltIn_js_1.configDefinitionsBuiltIn));
            await loadValueFile(interfaceFile, configName, userRootDir);
        }));
        const configValueSources = {};
        await Promise.all((0, utils_js_1.objectEntries)(configDefinitionsRelevant)
            .filter(([configName]) => !isGlobalConfig(configName))
            .map(async ([configName, configDef]) => {
            const sources = await resolveConfigValueSources(configName, configDef, interfaceFilesRelevant, userRootDir, importedFilesLoaded);
            if (sources.length === 0)
                return;
            configValueSources[configName] = sources;
        }));
        const { routeFilesystem, isErrorPage } = determineRouteFilesystem(locationId, configValueSources);
        applyEffectsAll(configValueSources, configDefinitionsRelevant);
        const configValuesComputed = getComputed(configValueSources, configDefinitionsRelevant);
        const configValues = getConfigValues(configValueSources, configValuesComputed, configDefinitionsRelevant);
        const pageConfig = {
            pageId: locationId,
            isErrorPage,
            routeFilesystem,
            configValueSources,
            configValuesComputed,
            configValues
        };
        return pageConfig;
    }));
    assertPageConfigs(pageConfigs);
    return { pageConfigs, pageConfigGlobal, globalVikeConfig };
}
function assertPageConfigs(pageConfigs) {
    pageConfigs.forEach((pageConfig) => {
        assertOnBeforeRenderEnv(pageConfig);
    });
}
function assertOnBeforeRenderEnv(pageConfig) {
    const onBeforeRenderConfig = pageConfig.configValueSources.onBeforeRender?.[0];
    if (!onBeforeRenderConfig)
        return;
    const onBeforeRenderEnv = onBeforeRenderConfig.configEnv;
    const isClientRouting = !!pageConfig.configValues.clientRouting?.value;
    // When using Server Routing, loading a onBeforeRender() hook on the client-side hasn't any effect (the Server Routing's client runtime never calls it); it unnecessarily bloats client bundle sizes
    (0, utils_js_1.assertUsage)(!(onBeforeRenderEnv.client && !isClientRouting), `Page ${pageConfig.pageId} has an onBeforeRender() hook with env ${picocolors_1.default.cyan(JSON.stringify(onBeforeRenderEnv))} which doesn't make sense because the page is using Server Routing: onBeforeRender() can be run in the client only when using Client Routing.`);
}
function interfacefileIsAlreaydLoaded(interfaceFile) {
    const configMapValues = Object.values(interfaceFile.configMap);
    const isAlreadyLoaded = configMapValues.some((conf) => 'configValue' in conf);
    if (isAlreadyLoaded) {
        (0, utils_js_1.assert)(configMapValues.every((conf) => 'configValue' in conf));
    }
    return isAlreadyLoaded;
}
function getInterfaceFilesRelevant(interfaceFilesByLocationId, locationIdPage) {
    const interfaceFilesRelevant = Object.fromEntries(Object.entries(interfaceFilesByLocationId)
        .filter(([locationId]) => {
        return (0, filesystemRouting_js_1.isInherited)(locationId, locationIdPage);
    })
        .sort(([locationId1], [locationId2]) => (0, filesystemRouting_js_1.sortAfterInheritanceOrder)(locationId1, locationId2, locationIdPage)));
    return interfaceFilesRelevant;
}
function getInterfaceFileList(interfaceFilesByLocationId) {
    const interfaceFiles = [];
    Object.values(interfaceFilesByLocationId).forEach((interfaceFiles_) => {
        interfaceFiles.push(...interfaceFiles_);
    });
    return interfaceFiles;
}
async function getGlobalConfigs(interfaceFilesByLocationId, userRootDir, importedFilesLoaded) {
    const locationIds = Object.keys(interfaceFilesByLocationId);
    const interfaceFilesGlobal = Object.fromEntries(Object.entries(interfaceFilesByLocationId).filter(([locationId]) => {
        return (0, filesystemRouting_js_1.isGlobalLocation)(locationId, locationIds);
    }));
    // Validate that global configs live in global interface files
    {
        const interfaceFilesGlobalPaths = [];
        Object.entries(interfaceFilesGlobal).forEach(([locationId, interfaceFiles]) => {
            (0, utils_js_1.assert)((0, filesystemRouting_js_1.isGlobalLocation)(locationId, locationIds));
            interfaceFiles.forEach(({ filePath: { filePathRelativeToUserRootDir } }) => {
                if (filePathRelativeToUserRootDir) {
                    interfaceFilesGlobalPaths.push(filePathRelativeToUserRootDir);
                }
            });
        });
        const globalPaths = Array.from(new Set(interfaceFilesGlobalPaths.map((p) => path_1.default.posix.dirname(p))));
        Object.entries(interfaceFilesByLocationId).forEach(([locationId, interfaceFiles]) => {
            interfaceFiles.forEach((interfaceFile) => {
                Object.keys(interfaceFile.configMap).forEach((configName) => {
                    if (!(0, filesystemRouting_js_1.isGlobalLocation)(locationId, locationIds) && isGlobalConfig(configName)) {
                        (0, utils_js_1.assertUsage)(false, [
                            `${interfaceFile.filePath.filePathToShowToUser} defines the config ${picocolors_1.default.cyan(configName)} which is global:`,
                            globalPaths.length
                                ? `define ${picocolors_1.default.cyan(configName)} in ${(0, utils_js_1.joinEnglish)(globalPaths, 'or')} instead`
                                : `create a global config (e.g. /pages/+config.js) and define ${picocolors_1.default.cyan(configName)} there instead`
                        ].join(' '));
                    }
                });
            });
        });
    }
    const globalVikeConfig = {};
    const pageConfigGlobal = {
        configValueSources: {}
    };
    await Promise.all((0, utils_js_1.objectEntries)(configDefinitionsBuiltIn_js_1.configDefinitionsBuiltInGlobal).map(async ([configName, configDef]) => {
        const sources = await resolveConfigValueSources(configName, configDef, interfaceFilesGlobal, userRootDir, importedFilesLoaded);
        const configValueSource = sources[0];
        if (!configValueSource)
            return;
        if (configName === 'onBeforeRoute' || configName === 'onPrerenderStart') {
            (0, utils_js_1.assert)(!('value' in configValueSource));
            pageConfigGlobal.configValueSources[configName] = [configValueSource];
        }
        else {
            (0, utils_js_1.assert)('value' in configValueSource);
            if (configName === 'prerender' && typeof configValueSource.value === 'boolean')
                return;
            const { filePathToShowToUser } = configValueSource.definedAt;
            (0, utils_js_1.assertWarning)(false, `Being able to define config ${picocolors_1.default.cyan(configName)} in ${filePathToShowToUser} is experimental and will likely be removed. Define the config ${picocolors_1.default.cyan(configName)} in Vike's Vite plugin options instead.`, { onlyOnce: true });
            globalVikeConfig[configName] = configValueSource.value;
        }
    }));
    return { pageConfigGlobal, globalVikeConfig };
}
async function resolveConfigValueSources(configName, configDef, interfaceFilesRelevant, userRootDir, importedFilesLoaded) {
    const sourcesInfo = [];
    // interfaceFilesRelevant is sorted by sortAfterInheritanceOrder()
    for (const interfaceFiles of Object.values(interfaceFilesRelevant)) {
        const interfaceFilesDefiningConfig = interfaceFiles.filter((interfaceFile) => interfaceFile.configMap[configName]);
        if (interfaceFilesDefiningConfig.length === 0)
            continue;
        const visited = new WeakSet();
        const add = (interfaceFile) => {
            (0, utils_js_1.assert)(!visited.has(interfaceFile));
            visited.add(interfaceFile);
            sourcesInfo.push([configName, interfaceFile, configDef, userRootDir, importedFilesLoaded]);
        };
        // Main resolution logic
        {
            const interfaceValueFiles = interfaceFilesDefiningConfig
                .filter((interfaceFile) => interfaceFile.isValueFile &&
                // We consider side-effect configs (e.g. `export { frontmatter }` of .mdx files) later (i.e. with less priority)
                interfaceFile.configName === configName)
                .sort(makeOrderDeterministic);
            const interfaceConfigFiles = interfaceFilesDefiningConfig
                .filter((interfaceFile) => interfaceFile.isConfigFile &&
                // We consider value from extended configs (e.g. vike-react) later (i.e. with less priority)
                !interfaceFile.isConfigExtend)
                .sort(makeOrderDeterministic);
            const interfaceValueFile = interfaceValueFiles[0];
            const interfaceConfigFile = interfaceConfigFiles[0];
            // Make this value:
            //   /pages/some-page/+{configName}.js > `export default`
            // override that value:
            //   /pages/some-page/+config.h.js > `export default { someConfig }`
            const interfaceFileWinner = interfaceValueFile ?? interfaceConfigFile;
            if (interfaceFileWinner) {
                const interfaceFilesOverriden = [...interfaceValueFiles, ...interfaceConfigFiles].filter((f) => f !== interfaceFileWinner);
                // A user-land conflict of interfaceFiles with the same locationId means that the user has superfluously defined the config twice; the user should remove such redundancy making things unnecessarily ambiguous
                warnOverridenConfigValues(interfaceFileWinner, interfaceFilesOverriden, configName);
                [interfaceFileWinner, ...interfaceFilesOverriden].forEach((interfaceFile) => {
                    add(interfaceFile);
                });
            }
        }
        // Side-effect configs such as `export { frontmatter }` in .mdx files
        interfaceFilesDefiningConfig
            .filter((interfaceFile) => interfaceFile.isValueFile &&
            // Is side-effect config
            interfaceFile.configName !== configName)
            .forEach((interfaceValueFileSideEffect) => {
            add(interfaceValueFileSideEffect);
        });
        // extends
        interfaceFilesDefiningConfig
            .filter((interfaceFile) => interfaceFile.isConfigFile && interfaceFile.isConfigExtend)
            // extended config files are already sorted by inheritance order
            .forEach((interfaceFile) => {
            add(interfaceFile);
        });
        interfaceFilesDefiningConfig.forEach((interfaceFile) => {
            (0, utils_js_1.assert)(visited.has(interfaceFile));
        });
    }
    const sources = await Promise.all(sourcesInfo.map(async (args) => await getConfigValueSource(...args)));
    return sources;
}
function makeOrderDeterministic(interfaceFile1, interfaceFile2) {
    return (0, utils_js_1.lowerFirst)((interfaceFile) => {
        const { filePathRelativeToUserRootDir } = interfaceFile.filePath;
        (0, utils_js_1.assert)(isInterfaceFileUserLand(interfaceFile));
        (0, utils_js_1.assert)(filePathRelativeToUserRootDir);
        return filePathRelativeToUserRootDir.length;
    })(interfaceFile1, interfaceFile2);
}
function warnOverridenConfigValues(interfaceFileWinner, interfaceFilesOverriden, configName) {
    interfaceFilesOverriden.forEach((interfaceFileLoser) => {
        const loserFilePath = interfaceFileLoser.filePath.filePathToShowToUser;
        const winnerFilePath = interfaceFileWinner.filePath.filePathToShowToUser;
        (0, utils_js_1.assertWarning)(false, `Config ${configName} defined at ${loserFilePath} is always overwritten by ${configName} defined at ${winnerFilePath}, remove the superfluous ${configName} value defined at ${interfaceFileLoser}`, { onlyOnce: false });
    });
}
function isInterfaceFileUserLand(interfaceFile) {
    return (interfaceFile.isConfigFile && !interfaceFile.isConfigExtend) || interfaceFile.isValueFile;
}
async function getConfigValueSource(configName, interfaceFile, configDef, userRootDir, importedFilesLoaded) {
    const conf = interfaceFile.configMap[configName];
    (0, utils_js_1.assert)(conf);
    const configEnv = configDef.env;
    const definedAtConfigFile = {
        ...interfaceFile.filePath,
        fileExportPathToShowToUser: ['default', configName]
    };
    if (configDef._valueIsFilePath) {
        let definedAt;
        let valueFilePath;
        if (interfaceFile.isConfigFile) {
            const { configValue } = conf;
            const import_ = resolveImport(configValue, interfaceFile.filePath, userRootDir, configEnv, configName);
            const configDefinedAt = (0, helpers_js_1.getConfigDefinedAtString)('Config', configName, { definedAt: definedAtConfigFile });
            (0, utils_js_1.assertUsage)(import_, `${configDefinedAt} should be an import`);
            valueFilePath = import_.filePathAbsoluteVite;
            definedAt = import_;
        }
        else {
            (0, utils_js_1.assert)(interfaceFile.isValueFile);
            valueFilePath = interfaceFile.filePath.filePathAbsoluteVite;
            definedAt = {
                ...interfaceFile.filePath,
                fileExportPathToShowToUser: []
            };
        }
        const configValueSource = {
            value: valueFilePath,
            valueIsFilePath: true,
            configEnv,
            valueIsImportedAtRuntime: true,
            definedAt
        };
        return configValueSource;
    }
    if (interfaceFile.isConfigFile) {
        (0, utils_js_1.assert)('configValue' in conf);
        const { configValue } = conf;
        const import_ = resolveImport(configValue, interfaceFile.filePath, userRootDir, configEnv, configName);
        if (import_) {
            const configValueSource = {
                configEnv,
                valueIsImportedAtRuntime: true,
                definedAt: import_
            };
            // Load config value
            if (isConfigEnv(configDef, configName)) {
                if (import_.filePathAbsoluteFilesystem) {
                    (0, utils_js_1.assert)((0, utils_js_1.hasProp)(import_, 'filePathAbsoluteFilesystem', 'string')); // Help TS
                    const fileExports = await loadImportedFile(import_, userRootDir, importedFilesLoaded);
                    configValueSource.value = fileExports[import_.fileExportName];
                }
                else {
                    const configDefinedAt = (0, helpers_js_1.getConfigDefinedAtString)('Config', configName, configValueSource);
                    (0, utils_js_1.assertUsage)(!configDef.cumulative, `${configDefinedAt} cannot be defined over an aliased import`);
                }
            }
            return configValueSource;
        }
        else {
            const configValueSource = {
                value: configValue,
                configEnv,
                valueIsImportedAtRuntime: false,
                definedAt: definedAtConfigFile
            };
            return configValueSource;
        }
    }
    else if (interfaceFile.isValueFile) {
        const valueAlreadyLoaded = 'configValue' in conf;
        (0, utils_js_1.assert)(valueAlreadyLoaded === !!configEnv.config);
        const configValueSource = {
            configEnv,
            valueIsImportedAtRuntime: !valueAlreadyLoaded,
            definedAt: {
                ...interfaceFile.filePath,
                fileExportPathToShowToUser: configName === interfaceFile.configName
                    ? []
                    : // Side-effect config (e.g. `export { frontmatter }` of .md files)
                        [configName]
            }
        };
        if (valueAlreadyLoaded) {
            configValueSource.value = conf.configValue;
        }
        return configValueSource;
    }
    (0, utils_js_1.assert)(false);
}
function assertFileEnv(filePathForEnvCheck, configEnv, configName) {
    (0, utils_js_1.assertPosixPath)(filePathForEnvCheck);
    if (!filesEnv.has(filePathForEnvCheck)) {
        filesEnv.set(filePathForEnvCheck, []);
    }
    const fileEnv = filesEnv.get(filePathForEnvCheck);
    fileEnv.push({ configEnv, configName });
    const configDifferentEnv = fileEnv.filter((c) => !(0, utils_js_1.deepEqual)(c.configEnv, configEnv))[0];
    if (configDifferentEnv) {
        (0, utils_js_1.assertUsage)(false, [
            `${filePathForEnvCheck} defines the value of configs living in different environments:`,
            ...[configDifferentEnv, { configName, configEnv }].map((c) => `  - config ${picocolors_1.default.cyan(c.configName)} which value lives in environment ${picocolors_1.default.cyan(JSON.stringify(c.configEnv))}`),
            'Defining config values in the same file is allowed only if they live in the same environment, see https://vike.dev/header-file'
        ].join('\n'));
    }
}
function isDefiningPage(interfaceFiles) {
    for (const interfaceFile of interfaceFiles) {
        const configNames = Object.keys(interfaceFile.configMap);
        if (configNames.some((configName) => isDefiningPageConfig(configName))) {
            return true;
        }
    }
    return false;
}
function isDefiningPageConfig(configName) {
    return ['Page', 'route'].includes(configName);
}
function resolveImport(configValue, importerFilePath, userRootDir, configEnv, configName) {
    if (typeof configValue !== 'string')
        return null;
    const importData = (0, replaceImportStatements_js_1.parseImportData)(configValue);
    if (!importData)
        return null;
    const { importPath, exportName } = importData;
    const filePathAbsoluteFilesystem = resolveImportPath(importData, importerFilePath);
    assertFileEnv(filePathAbsoluteFilesystem ?? importPath, configEnv, configName);
    const fileExportPathToShowToUser = exportName === 'default' || exportName === configName ? [] : [exportName];
    if (importPath.startsWith('.')) {
        // We need to resolve relative paths into absolute paths. Because the import paths are included in virtual files:
        // ```
        // [vite] Internal server error: Failed to resolve import "./onPageTransitionHooks" from "virtual:vike:pageConfigValuesAll:client:/pages/index". Does the file exist?
        // ```
        assertImportPath(filePathAbsoluteFilesystem, importData, importerFilePath);
        const filePathRelativeToUserRootDir = resolveImportPath_relativeToUserRootDir(filePathAbsoluteFilesystem, importData, importerFilePath, userRootDir);
        const filePath = {
            filePathAbsoluteFilesystem,
            filePathRelativeToUserRootDir,
            filePathAbsoluteVite: filePathRelativeToUserRootDir,
            filePathToShowToUser: filePathRelativeToUserRootDir,
            importPathAbsolute: null
        };
        return {
            ...filePath,
            fileExportName: exportName,
            fileExportPathToShowToUser
        };
    }
    else {
        // importPath can be:
        //  - an npm package import
        //  - a path alias
        const filePath = {
            filePathAbsoluteFilesystem,
            filePathRelativeToUserRootDir: null,
            filePathAbsoluteVite: importPath,
            filePathToShowToUser: importPath,
            importPathAbsolute: importPath
        };
        return {
            ...filePath,
            fileExportName: exportName,
            fileExportPathToShowToUser
        };
    }
}
function resolveImportPath_relativeToUserRootDir(filePathAbsoluteFilesystem, importData, configFilePath, userRootDir) {
    (0, utils_js_1.assertPosixPath)(userRootDir);
    let filePathRelativeToUserRootDir;
    if (filePathAbsoluteFilesystem.startsWith(userRootDir)) {
        filePathRelativeToUserRootDir = getVitePathFromAbsolutePath(filePathAbsoluteFilesystem, userRootDir);
    }
    else {
        (0, utils_js_1.assertUsage)(false, `${configFilePath.filePathToShowToUser} imports from a relative path ${picocolors_1.default.cyan(importData.importPath)} outside of ${userRootDir} which is forbidden: import from a relative path inside ${userRootDir}, or import from a dependency's package.json#exports entry instead`);
        // None of the following works. Seems to be a Vite bug?
        // /*
        // assert(filePathAbsoluteFilesystem.startsWith('/'))
        // filePath = `/@fs${filePathAbsoluteFilesystem}`
        // /*/
        // filePathRelativeToUserRootDir = path.posix.relative(userRootDir, filePathAbsoluteFilesystem)
        // assert(filePathRelativeToUserRootDir.startsWith('../'))
        // filePathRelativeToUserRootDir = '/' + filePathRelativeToUserRootDir
        // //*/
    }
    (0, utils_js_1.assertPosixPath)(filePathRelativeToUserRootDir);
    (0, utils_js_1.assert)(filePathRelativeToUserRootDir.startsWith('/'));
    return filePathRelativeToUserRootDir;
}
function getVitePathFromAbsolutePath(filePathAbsoluteFilesystem, root) {
    (0, utils_js_1.assertPosixPath)(filePathAbsoluteFilesystem);
    (0, utils_js_1.assertPosixPath)(root);
    (0, utils_js_1.assert)(filePathAbsoluteFilesystem.startsWith(root));
    let vitePath = path_1.default.posix.relative(root, filePathAbsoluteFilesystem);
    (0, utils_js_1.assert)(!vitePath.startsWith('/') && !vitePath.startsWith('.'));
    vitePath = '/' + vitePath;
    return vitePath;
}
function getConfigDefinitions(interfaceFilesRelevant) {
    const configDefinitions = { ...configDefinitionsBuiltIn_js_1.configDefinitionsBuiltIn };
    Object.entries(interfaceFilesRelevant).forEach(([_locationId, interfaceFiles]) => {
        interfaceFiles.forEach((interfaceFile) => {
            const configMeta = interfaceFile.configMap['meta'];
            if (!configMeta)
                return;
            const meta = configMeta.configValue;
            assertMetaValue(meta, `Config ${picocolors_1.default.cyan('meta')} defined at ${interfaceFile.filePath.filePathToShowToUser}`);
            // Set configDef._userEffectDefinedAt
            Object.entries(meta).forEach(([configName, configDef]) => {
                if (!configDef.effect)
                    return;
                (0, utils_js_1.assert)(interfaceFile.isConfigFile);
                configDef._userEffectDefinedAt = {
                    ...interfaceFile.filePath,
                    fileExportPathToShowToUser: ['default', 'meta', configName, 'effect']
                };
            });
            (0, utils_js_1.objectEntries)(meta).forEach(([configName, configDefinition]) => {
                // User can override an existing config definition
                configDefinitions[configName] = {
                    ...configDefinitions[configName],
                    ...configDefinition
                };
            });
        });
    });
    return configDefinitions;
}
function assertMetaValue(metaVal, configMetaDefinedAt) {
    if (!(0, utils_js_1.isObject)(metaVal)) {
        (0, utils_js_1.assert)(configMetaDefinedAt); // We expect internal effects to return a valid meta value
        (0, utils_js_1.assertUsage)(false, `${configMetaDefinedAt} has an invalid type ${picocolors_1.default.cyan(typeof metaVal)}: it should be an object instead.`);
    }
    (0, utils_js_1.objectEntries)(metaVal).forEach(([configName, def]) => {
        if (!(0, utils_js_1.isObject)(def)) {
            (0, utils_js_1.assert)(configMetaDefinedAt); // We expect internal effects to return a valid meta value
            (0, utils_js_1.assertUsage)(false, `${configMetaDefinedAt} sets ${picocolors_1.default.cyan(`meta.${configName}`)} to a value with an invalid type ${picocolors_1.default.cyan(typeof def)}: it should be an object instead.`);
        }
        // env
        let configEnv;
        {
            (0, utils_js_1.assert)(configMetaDefinedAt); // We expect internal effects to return a valid meta value
            if (!('env' in def)) {
                (0, utils_js_1.assertUsage)(false, `${configMetaDefinedAt} doesn't set ${picocolors_1.default.cyan(`meta.${configName}.env`)} but it's required.`);
            }
            configEnv = getConfigEnvValue(def.env, `${configMetaDefinedAt} sets ${picocolors_1.default.cyan(`meta.${configName}.env`)} to`);
            // Overwrite deprecated value with valid value
            // TODO/v1-release: remove once support for the deprecated values is removed
            if (typeof def.env === 'string')
                def.env = configEnv;
        }
        // effect
        if ('effect' in def) {
            if (!(0, utils_js_1.hasProp)(def, 'effect', 'function')) {
                (0, utils_js_1.assert)(configMetaDefinedAt); // We expect internal effects to return a valid meta value
                (0, utils_js_1.assertUsage)(false, `${configMetaDefinedAt} sets ${picocolors_1.default.cyan(`meta.${configName}.effect`)} to an invalid type ${picocolors_1.default.cyan(typeof def.effect)}: it should be a function instead`);
            }
            if (!configEnv.config) {
                (0, utils_js_1.assert)(configMetaDefinedAt); // We expect internal effects to return a valid meta value
                (0, utils_js_1.assertUsage)(false, `${configMetaDefinedAt} sets ${picocolors_1.default.cyan(`meta.${configName}.effect`)} but it's only supported if meta.${configName}.env has ${picocolors_1.default.cyan('{ config: true }')} (but it's ${picocolors_1.default.cyan(JSON.stringify(configEnv))} instead)`);
            }
        }
    });
}
function applyEffectsAll(configValueSources, configDefinitionsRelevant) {
    (0, utils_js_1.objectEntries)(configDefinitionsRelevant).forEach(([configName, configDef]) => {
        if (!configDef.effect)
            return;
        // The value needs to be loaded at config time, that's why we only support effect for configs that are config-only for now.
        // (We could support effect for non config-only by always loading its value at config time, regardless of the config's `env` value.)
        (0, utils_js_1.assertUsage)(configDef.env.config, [
            `Cannot add effect to ${picocolors_1.default.cyan(configName)} because its ${picocolors_1.default.cyan('env')} is ${picocolors_1.default.cyan(JSON.stringify(configDef.env))}: effects can only be added to configs with an ${picocolors_1.default.cyan('env')} with ${picocolors_1.default.cyan('{ config: true }')}.`
        ].join(' '));
        const source = configValueSources[configName]?.[0];
        if (!source)
            return;
        // The config value is eagerly loaded since `configDef.env === 'config-only``
        (0, utils_js_1.assert)('value' in source);
        // Call effect
        const configModFromEffect = configDef.effect({
            configValue: source.value,
            configDefinedAt: (0, helpers_js_1.getConfigDefinedAtString)('Config', configName, source)
        });
        if (!configModFromEffect)
            return;
        (0, utils_js_1.assert)((0, utils_js_1.hasProp)(source, 'value')); // We need to assume that the config value is loaded at build-time
        applyEffect(configModFromEffect, configValueSources, configDef);
    });
}
function applyEffect(configModFromEffect, configValueSources, configDefEffect) {
    const notSupported = `Effects currently only supports modifying the the ${picocolors_1.default.cyan('env')} of a config.`;
    (0, utils_js_1.objectEntries)(configModFromEffect).forEach(([configName, configValue]) => {
        if (configName === 'meta') {
            let configDefinedAtString;
            if (configDefEffect._userEffectDefinedAt) {
                configDefinedAtString = (0, helpers_js_1.getConfigDefinedAtString)('Config', configName, {
                    definedAt: configDefEffect._userEffectDefinedAt
                });
            }
            else {
                configDefinedAtString = null;
            }
            assertMetaValue(configValue, configDefinedAtString);
            (0, utils_js_1.objectEntries)(configValue).forEach(([configTargetName, configTargetDef]) => {
                {
                    const keys = Object.keys(configTargetDef);
                    (0, utils_js_1.assertUsage)(keys.includes('env'), notSupported);
                    (0, utils_js_1.assertUsage)(keys.length === 1, notSupported);
                }
                const envOverriden = configTargetDef.env;
                const sources = configValueSources[configTargetName];
                sources?.forEach((configValueSource) => {
                    // Apply effect
                    configValueSource.configEnv = envOverriden;
                });
            });
        }
        else {
            (0, utils_js_1.assertUsage)(false, notSupported);
            // If we do end implementing being able to set the value of a config:
            //  - For setting definedAt: we could take the definedAt of the effect config while appending '(effect)' to definedAt.fileExportPathToShowToUser
        }
    });
}
function getComputed(configValueSources, configDefinitionsRelevant) {
    const configValuesComputed = {};
    (0, utils_js_1.objectEntries)(configDefinitionsRelevant).forEach(([configName, configDef]) => {
        if (!configDef._computed)
            return;
        const value = configDef._computed(configValueSources);
        if (value === undefined)
            return;
        configValuesComputed[configName] = {
            value,
            configEnv: configDef.env
        };
    });
    return configValuesComputed;
}
async function findPlusFiles(userRootDir, outDirRoot, isDev, extensions) {
    const files = await (0, crawlPlusFiles_js_1.crawlPlusFiles)(userRootDir, outDirRoot, isDev);
    const plusFiles = files.map(({ filePathRelativeToUserRootDir, filePathAbsoluteFilesystem }) => {
        return {
            filePathRelativeToUserRootDir,
            filePathAbsoluteVite: filePathRelativeToUserRootDir,
            filePathAbsoluteFilesystem,
            filePathToShowToUser: filePathRelativeToUserRootDir,
            importPathAbsolute: null
        };
    });
    // TODO/v1-release: remove
    extensions.forEach((extension) => {
        extension.pageConfigsDistFiles?.forEach((pageConfigDistFile) => {
            if (!pageConfigDistFile.importPath.includes('+'))
                return;
            (0, utils_js_1.assert)(pageConfigDistFile.importPath.includes('+'));
            (0, utils_js_1.assert)(path_1.default.posix.basename(pageConfigDistFile.importPath).startsWith('+'));
            const { importPath, filePath } = pageConfigDistFile;
            plusFiles.push({
                filePathRelativeToUserRootDir: null,
                filePathAbsoluteVite: importPath,
                filePathAbsoluteFilesystem: filePath,
                filePathToShowToUser: importPath,
                importPathAbsolute: importPath
            });
        });
    });
    return plusFiles;
}
function getConfigName(filePath) {
    (0, utils_js_1.assertPosixPath)(filePath);
    if ((0, transpileAndExecuteFile_js_1.isTmpFile)(filePath))
        return null;
    const fileName = path_1.default.posix.basename(filePath);
    // assertNoUnexpectedPlusSign(filePath, fileName)
    const basename = fileName.split('.')[0];
    if (!basename.startsWith('+')) {
        return null;
    }
    else {
        const configName = basename.slice(1);
        return configName;
    }
}
async function loadConfigFile(configFilePath, userRootDir, visited) {
    const { filePathAbsoluteFilesystem } = configFilePath;
    assertNoInfiniteLoop(visited, filePathAbsoluteFilesystem);
    const { fileExports } = await (0, transpileAndExecuteFile_js_1.transpileAndExecuteFile)(configFilePath, false, userRootDir);
    const { extendsConfigs, extendsFilePaths } = await loadExtendsConfigs(fileExports, configFilePath, userRootDir, [
        ...visited,
        filePathAbsoluteFilesystem
    ]);
    const configFile = {
        fileExports,
        filePath: configFilePath,
        extendsFilePaths
    };
    return { configFile, extendsConfigs };
}
function assertNoInfiniteLoop(visited, filePathAbsoluteFilesystem) {
    const idx = visited.indexOf(filePathAbsoluteFilesystem);
    if (idx === -1)
        return;
    const loop = visited.slice(idx);
    (0, utils_js_1.assert)(loop[0] === filePathAbsoluteFilesystem);
    (0, utils_js_1.assertUsage)(idx === -1, `Infinite extends loop ${[...loop, filePathAbsoluteFilesystem].join('>')}`);
}
async function loadExtendsConfigs(configFileExports, configFilePath, userRootDir, visited) {
    const extendsImportData = getExtendsImportData(configFileExports, configFilePath);
    const extendsConfigFiles = [];
    extendsImportData.map((importData) => {
        const { importPath: importPath } = importData;
        const filePathAbsoluteFilesystem = resolveImportPath(importData, configFilePath);
        assertImportPath(filePathAbsoluteFilesystem, importData, configFilePath);
        assertExtendsImportPath(importPath, filePathAbsoluteFilesystem, configFilePath);
        // - filePathRelativeToUserRootDir has no functionality beyond nicer error messages for user
        // - Using importPath would be visually nicer but it's ambigous => we rather pick filePathAbsoluteFilesystem for added clarity
        const filePathRelativeToUserRootDir = determineFilePathRelativeToUserDir(filePathAbsoluteFilesystem, userRootDir);
        const filePathAbsoluteVite = filePathRelativeToUserRootDir ?? importPath;
        extendsConfigFiles.push({
            filePathAbsoluteFilesystem,
            filePathAbsoluteVite,
            filePathRelativeToUserRootDir,
            filePathToShowToUser: filePathAbsoluteVite,
            importPathAbsolute: importPath
        });
    });
    const extendsConfigs = [];
    await Promise.all(extendsConfigFiles.map(async (configFilePath) => {
        const result = await loadConfigFile(configFilePath, userRootDir, visited);
        extendsConfigs.push(result.configFile);
        extendsConfigs.push(...result.extendsConfigs);
    }));
    const extendsFilePaths = extendsConfigFiles.map((f) => f.filePathAbsoluteFilesystem);
    return { extendsConfigs, extendsFilePaths };
}
function determineFilePathRelativeToUserDir(filePathAbsoluteFilesystem, userRootDir) {
    (0, utils_js_1.assertPosixPath)(filePathAbsoluteFilesystem);
    (0, utils_js_1.assertPosixPath)(userRootDir);
    if (!filePathAbsoluteFilesystem.startsWith(userRootDir)) {
        return null;
    }
    let filePathRelativeToUserRootDir = filePathAbsoluteFilesystem.slice(userRootDir.length);
    if (!filePathRelativeToUserRootDir.startsWith('/'))
        filePathRelativeToUserRootDir = '/' + filePathRelativeToUserRootDir;
    return filePathRelativeToUserRootDir;
}
function assertExtendsImportPath(importPath, filePath, configFilePath) {
    if ((0, utils_js_1.isNpmPackageImport)(importPath)) {
        const fileDir = path_1.default.posix.dirname(filePath) + '/';
        const fileName = path_1.default.posix.basename(filePath);
        const fileNameBaseCorrect = '+config';
        const [fileNameBase, ...fileNameRest] = fileName.split('.');
        const fileNameCorrect = [fileNameBaseCorrect, ...fileNameRest].join('.');
        (0, utils_js_1.assertWarning)(fileNameBase === fileNameBaseCorrect, `Rename ${fileName} to ${fileNameCorrect} in ${fileDir}`, {
            onlyOnce: true
        });
    }
    else {
        (0, utils_js_1.assertWarning)(false, `${configFilePath.filePathToShowToUser} uses ${picocolors_1.default.cyan('extends')} to inherit from ${picocolors_1.default.cyan(importPath)} which is a user-land file: this is experimental and may be remove at any time. Reach out to a maintainer if you need this feature.`, { onlyOnce: true });
    }
}
function getExtendsImportData(configFileExports, configFilePath) {
    const { filePathToShowToUser } = configFilePath;
    (0, assertExports_js_1.assertExportsOfConfigFile)(configFileExports, filePathToShowToUser);
    const defaultExports = configFileExports.default;
    const wrongUsage = `${filePathToShowToUser} sets the config ${picocolors_1.default.cyan('extends')} to an invalid value, see https://vike.dev/extends`;
    let extendList;
    if (!('extends' in defaultExports)) {
        return [];
    }
    else if ((0, utils_js_1.hasProp)(defaultExports, 'extends', 'string')) {
        extendList = [defaultExports.extends];
    }
    else if ((0, utils_js_1.hasProp)(defaultExports, 'extends', 'string[]')) {
        extendList = defaultExports.extends;
    }
    else {
        (0, utils_js_1.assertUsage)(false, wrongUsage);
    }
    const extendsImportData = extendList.map((importDataSerialized) => {
        const importData = (0, replaceImportStatements_js_1.parseImportData)(importDataSerialized);
        (0, utils_js_1.assertUsage)(importData, wrongUsage);
        return importData;
    });
    return extendsImportData;
}
function isGlobalConfig(configName) {
    if (configName === 'prerender')
        return false;
    const configNamesGlobal = getConfigNamesGlobal();
    return (0, utils_js_1.arrayIncludes)(configNamesGlobal, configName);
}
function getConfigNamesGlobal() {
    return Object.keys(configDefinitionsBuiltIn_js_1.configDefinitionsBuiltInGlobal);
}
function assertConfigExists(configName, configNamesRelevant, filePathToShowToUser) {
    const configNames = [...configNamesRelevant, ...getConfigNamesGlobal()];
    if (configNames.includes(configName))
        return;
    handleUnknownConfig(configName, configNames, filePathToShowToUser);
    (0, utils_js_1.assert)(false);
}
function handleUnknownConfig(configName, configNames, filePathToShowToUser) {
    let errMsg = `${filePathToShowToUser} defines an unknown config ${picocolors_1.default.cyan(configName)}`;
    let configNameSimilar = null;
    if (configName === 'page') {
        configNameSimilar = 'Page';
    }
    else {
        configNameSimilar = (0, utils_js_1.getMostSimilar)(configName, configNames);
    }
    if (configNameSimilar || configName === 'page') {
        (0, utils_js_1.assert)(configNameSimilar);
        (0, utils_js_1.assert)(configNameSimilar !== configName);
        errMsg += `, did you mean to define ${picocolors_1.default.cyan(configNameSimilar)} instead?`;
        if (configName === 'page') {
            errMsg += ` (The name of the config ${picocolors_1.default.cyan('Page')} starts with a capital letter ${picocolors_1.default.cyan('P')} because it usually defines a UI component: a ubiquitous JavaScript convention is to start the name of UI components with a capital letter.)`;
        }
    }
    else {
        errMsg += `, you need to define the config ${picocolors_1.default.cyan(configName)} by using ${picocolors_1.default.cyan('config.meta')} https://vike.dev/meta`;
    }
    (0, utils_js_1.assertUsage)(false, errMsg);
}
function determineRouteFilesystem(locationId, configValueSources) {
    const configName = 'filesystemRoutingRoot';
    const configFilesystemRoutingRoot = configValueSources[configName]?.[0];
    let filesystemRouteString = (0, filesystemRouting_js_1.getFilesystemRouteString)(locationId);
    if (determineIsErrorPage(filesystemRouteString)) {
        return { isErrorPage: true, routeFilesystem: undefined };
    }
    let filesystemRouteDefinedBy = (0, filesystemRouting_js_1.getFilesystemRouteDefinedBy)(locationId); // for log404()
    if (configFilesystemRoutingRoot) {
        const routingRoot = getFilesystemRoutingRootEffect(configFilesystemRoutingRoot, configName);
        if (routingRoot) {
            const { filesystemRoutingRootEffect /*, filesystemRoutingRootDefinedAt*/ } = routingRoot;
            const debugInfo = { locationId, routeFilesystem: filesystemRouteString, configFilesystemRoutingRoot };
            (0, utils_js_1.assert)(filesystemRouteString.startsWith(filesystemRoutingRootEffect.before), debugInfo);
            filesystemRouteString = (0, filesystemRouting_js_1.applyFilesystemRoutingRootEffect)(filesystemRouteString, filesystemRoutingRootEffect);
            // filesystemRouteDefinedBy = `${filesystemRouteDefinedBy} (with ${filesystemRoutingRootDefinedAt})`
        }
    }
    (0, utils_js_1.assert)(filesystemRouteString.startsWith('/'));
    const routeFilesystem = {
        routeString: filesystemRouteString,
        definedBy: filesystemRouteDefinedBy
    };
    return { routeFilesystem, isErrorPage: undefined };
}
function getFilesystemRoutingRootEffect(configFilesystemRoutingRoot, configName) {
    (0, utils_js_1.assert)(configFilesystemRoutingRoot.configEnv.config);
    // Eagerly loaded since it's config-only
    (0, utils_js_1.assert)('value' in configFilesystemRoutingRoot);
    const { value } = configFilesystemRoutingRoot;
    const configDefinedAt = (0, helpers_js_1.getConfigDefinedAtString)('Config', configName, configFilesystemRoutingRoot);
    (0, utils_js_1.assertUsage)(typeof value === 'string', `${configDefinedAt} should be a string`);
    (0, utils_js_1.assertUsage)(value.startsWith('/'), `${configDefinedAt} is ${picocolors_1.default.cyan(value)} but it should start with a leading slash ${picocolors_1.default.cyan('/')}`);
    const { filePathRelativeToUserRootDir } = configFilesystemRoutingRoot.definedAt;
    (0, utils_js_1.assert)(filePathRelativeToUserRootDir);
    const before = (0, filesystemRouting_js_1.getFilesystemRouteString)((0, filesystemRouting_js_1.getLocationId)(filePathRelativeToUserRootDir));
    const after = value;
    const filesystemRoutingRootEffect = { before, after };
    return { filesystemRoutingRootEffect, filesystemRoutingRootDefinedAt: configDefinedAt };
}
function determineIsErrorPage(routeFilesystem) {
    (0, utils_js_1.assertPosixPath)(routeFilesystem);
    return routeFilesystem.split('/').includes('_error');
}
function resolveImportPath(importData, importerFilePath) {
    const importerFilePathAbsolute = importerFilePath.filePathAbsoluteFilesystem;
    (0, utils_js_1.assertPosixPath)(importerFilePathAbsolute);
    const cwd = path_1.default.posix.dirname(importerFilePathAbsolute);
    // filePathAbsoluteFilesystem is expected to be null when importData.importPath is a Vite path alias
    const filePathAbsoluteFilesystem = (0, utils_js_1.requireResolve)(importData.importPath, cwd);
    return filePathAbsoluteFilesystem;
}
function assertImportPath(filePathAbsoluteFilesystem, importData, importerFilePath) {
    const { importPath: importPath, importStringWasGenerated, importString } = importData;
    const { filePathToShowToUser } = importerFilePath;
    if (!filePathAbsoluteFilesystem) {
        const importPathString = picocolors_1.default.cyan(`'${importPath}'`);
        const errIntro = importStringWasGenerated
            ? `The import path ${importPathString} in ${filePathToShowToUser}`
            : `The import ${picocolors_1.default.cyan(importString)} defined in ${filePathToShowToUser}`;
        const errIntro2 = `${errIntro} couldn't be resolved: does ${importPathString}`;
        if (importPath.startsWith('.')) {
            (0, utils_js_1.assertUsage)(false, `${errIntro2} point to an existing file?`);
        }
        else {
            (0, utils_js_1.assertUsage)(false, `${errIntro2} exist?`);
        }
    }
}
function isVikeConfigFile(filePath) {
    return !!getConfigName(filePath);
}
exports.isVikeConfigFile = isVikeConfigFile;
function getConfigValues(configValueSources, configValuesComputed, configDefinitionsRelevant) {
    const configValues = {};
    Object.entries(configValuesComputed).forEach(([configName, configValueComputed]) => {
        configValues[configName] = {
            value: configValueComputed.value,
            definedAt: { isComputed: true }
        };
    });
    Object.entries(configValueSources).forEach(([configName, sources]) => {
        const configDef = configDefinitionsRelevant[configName];
        (0, utils_js_1.assert)(configDef);
        if (!configDef.cumulative) {
            const configValueSource = sources[0];
            if ('value' in configValueSource) {
                configValues[configName] = {
                    value: configValueSource.value,
                    definedAt: getDefinedAt(configValueSource)
                };
            }
        }
        else {
            const value = mergeCumulative(configName, sources);
            configValues[configName] = {
                value,
                definedAt: {
                    files: sources.map((source) => getDefinedAtFile(source))
                }
            };
        }
    });
    return configValues;
}
function getDefinedAtFile(configValueSource) {
    return {
        filePathToShowToUser: configValueSource.definedAt.filePathToShowToUser,
        fileExportPathToShowToUser: configValueSource.definedAt.fileExportPathToShowToUser
    };
}
function getDefinedAt(configValueSource) {
    return getDefinedAtFile(configValueSource);
}
function mergeCumulative(configName, configValueSources) {
    const valuesArr = [];
    const valuesSet = [];
    let configValueSourcePrevious = null;
    configValueSources.forEach((configValueSource) => {
        const configDefinedAt = (0, helpers_js_1.getConfigDefinedAtString)('Config', configName, configValueSource);
        // We could, in principle, also support cumulative for values that aren't loaded at config-time but it isn't completely trivial to implement.
        (0, utils_js_1.assert)('value' in configValueSource);
        // Make sure configValueSource.value is serializable
        (0, getConfigValuesSerialized_js_1.assertConfigValueIsSerializable)(configValueSource.value, configName, getDefinedAt(configValueSource));
        const assertNoMixing = (isSet) => {
            const vals1 = isSet ? valuesSet : valuesArr;
            const t1 = isSet ? 'a Set' : 'an array';
            const vals2 = !isSet ? valuesSet : valuesArr;
            const t2 = !isSet ? 'a Set' : 'an array';
            (0, utils_js_1.assert)(vals1.length > 0);
            if (vals2.length === 0)
                return;
            (0, utils_js_1.assert)(configValueSourcePrevious);
            const configPreviousDefinedAt = (0, helpers_js_1.getConfigDefinedAtString)('Config', configName, configValueSourcePrevious);
            (0, utils_js_1.assertUsage)(false, `${configDefinedAt} sets ${t1} but another ${configPreviousDefinedAt} sets ${t2} which is forbidden: the values must be all arrays or all sets (you cannot mix).`);
        };
        const { value } = configValueSource;
        if (Array.isArray(value)) {
            valuesArr.push(value);
            assertNoMixing(false);
        }
        else if (value instanceof Set) {
            valuesSet.push(value);
            assertNoMixing(true);
        }
        else {
            (0, utils_js_1.assertUsage)(false, `${configDefinedAt} must be an array or a Set`);
        }
        configValueSourcePrevious = configValueSource;
    });
    if (valuesArr.length > 0) {
        (0, utils_js_1.assert)(valuesSet.length === 0);
        const result = (0, utils_js_1.mergeCumulativeValues)(valuesArr);
        (0, utils_js_1.assert)(result !== null);
        return result;
    }
    if (valuesSet.length > 0) {
        (0, utils_js_1.assert)(valuesArr.length === 0);
        const result = (0, utils_js_1.mergeCumulativeValues)(valuesSet);
        (0, utils_js_1.assert)(result !== null);
        return result;
    }
    (0, utils_js_1.assert)(false);
}
function getConfigEnvValue(val, errMsgIntro) {
    const errInvalidValue = `${errMsgIntro} an invalid value ${picocolors_1.default.cyan(JSON.stringify(val))}`;
    // Legacy outdated values
    if (typeof val === 'string') {
        const valConverted = (() => {
            if (val === 'client-only')
                return { client: true };
            if (val === 'server-only')
                return { server: true };
            if (val === 'server-and-client')
                return { server: true, client: true };
            if (val === 'config-only')
                return { config: true };
            if (val === '_routing-lazy')
                return { server: true, client: 'if-client-routing' };
            if (val === '_routing-eager')
                return { server: true, client: 'if-client-routing', eager: true };
            (0, utils_js_1.assertUsage)(false, errInvalidValue);
        })();
        (0, utils_js_1.assertWarning)(false, `${errMsgIntro} ${picocolors_1.default.cyan(val)} which is deprecated and will be removed in the next major release`, { onlyOnce: true });
        return valConverted;
    }
    (0, utils_js_1.assertUsage)((0, utils_js_1.isObject)(val), `${errMsgIntro} an invalid type ${picocolors_1.default.cyan(typeof val)}`);
    (0, utils_js_1.assertKeys)(val, ['config', 'server', 'client'], `${errInvalidValue}:`);
    (0, utils_js_1.assertUsage)((0, utils_js_1.hasProp)(val, 'config', 'undefined') || (0, utils_js_1.hasProp)(val, 'config', 'boolean'), errInvalidValue);
    (0, utils_js_1.assertUsage)((0, utils_js_1.hasProp)(val, 'server', 'undefined') || (0, utils_js_1.hasProp)(val, 'server', 'boolean'), errInvalidValue);
    (0, utils_js_1.assertUsage)((0, utils_js_1.hasProp)(val, 'client', 'undefined') || (0, utils_js_1.hasProp)(val, 'client', 'boolean'), errInvalidValue);
    /* Uncomment to allow users to set an eager config. Same for `{ client: 'if-client-routing' }`.
    assertUsage(hasProp(val, 'eager', 'undefined') || hasProp(val, 'eager', 'boolean'), errInvalidValue)
    */
    return val;
}
