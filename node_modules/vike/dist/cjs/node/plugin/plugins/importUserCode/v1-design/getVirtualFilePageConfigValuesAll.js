"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getVirtualFilePageConfigValuesAll = void 0;
const utils_js_1 = require("../../../utils.js");
const virtualFilePageConfigValuesAll_js_1 = require("../../../../shared/virtual-files/virtualFilePageConfigValuesAll.js");
const getVikeConfig_js_1 = require("./getVikeConfig.js");
const extractAssetsQuery_js_1 = require("../../../../shared/extractAssetsQuery.js");
const debug_js_1 = require("./debug.js");
const helpers_js_1 = require("../../../../../shared/page-configs/helpers.js");
const getConfigValueSourcesNotOverriden_js_1 = require("../../../shared/getConfigValueSourcesNotOverriden.js");
const isRuntimeEnvMatch_js_1 = require("./isRuntimeEnvMatch.js");
const serializeConfigValue_js_1 = require("../../../../../shared/page-configs/serialize/serializeConfigValue.js");
const getConfigVike_js_1 = require("../../../../shared/getConfigVike.js");
const getConfigValuesSerialized_js_1 = require("./getConfigValuesSerialized.js");
async function getVirtualFilePageConfigValuesAll(id, isDev, config) {
    const result = (0, virtualFilePageConfigValuesAll_js_1.isVirtualFileIdPageConfigValuesAll)(id);
    (0, utils_js_1.assert)(result);
    /* This assertion fails when using includeAssetsImportedByServer
    {
      const isForClientSide = !config.build.ssr
      assert(result.isForClientSide === isForClientSide)
    }
    */
    const { pageId, isForClientSide } = result;
    const { pageConfigs } = await (0, getVikeConfig_js_1.getVikeConfig)(config, isDev, true);
    const pageConfig = pageConfigs.find((pageConfig) => pageConfig.pageId === pageId);
    (0, utils_js_1.assert)(pageConfig);
    const configVike = await (0, getConfigVike_js_1.getConfigVike)(config);
    const code = getLoadConfigValuesAll(pageConfig, isForClientSide, pageId, configVike.includeAssetsImportedByServer, isDev);
    (0, debug_js_1.debug)(id, isForClientSide ? 'CLIENT-SIDE' : 'SERVER-SIDE', code);
    return code;
}
exports.getVirtualFilePageConfigValuesAll = getVirtualFilePageConfigValuesAll;
function getLoadConfigValuesAll(pageConfig, isForClientSide, pageId, includeAssetsImportedByServer, isDev) {
    const lines = [];
    const importStatements = [];
    const isClientRouting = (0, helpers_js_1.getConfigValue)(pageConfig, 'clientRouting', 'boolean')?.value ?? false;
    lines.push('export const configValuesImported = [');
    lines.push(getConfigValuesImported(pageConfig, isForClientSide, isClientRouting, importStatements));
    lines.push('];');
    lines.push('export const configValuesSerialized = {');
    lines.push((0, getConfigValuesSerialized_js_1.getConfigValuesSerialized)(pageConfig, (configEnv, configValueSource) => isEnvMatch(configEnv, !configValueSource ? false : checkWhetherIsImport(configValueSource), {
        isImport: false,
        isForClientSide,
        isClientRouting
    })));
    lines.push('};');
    if (includeAssetsImportedByServer && isForClientSide && !isDev) {
        importStatements.push(`import '${(0, extractAssetsQuery_js_1.extractAssetsAddQuery)((0, virtualFilePageConfigValuesAll_js_1.getVirtualFileIdPageConfigValuesAll)(pageId, false))}'`);
    }
    const code = [...importStatements, ...lines].join('\n');
    return code;
}
function getConfigValuesImported(pageConfig, isForClientSide, isClientRouting, importStatements) {
    const lines = [];
    const varCounterContainer = { varCounter: 0 };
    (0, getConfigValueSourcesNotOverriden_js_1.getConfigValueSourcesNotOverriden)(pageConfig).forEach((configValueSource) => {
        if (!isEnvMatch(configValueSource.configEnv, checkWhetherIsImport(configValueSource), {
            isImport: true,
            isForClientSide,
            isClientRouting
        }))
            return;
        const whitespace = '  ';
        lines.push(...(0, serializeConfigValue_js_1.serializeConfigValueImported)(configValueSource, configValueSource.configName, whitespace, varCounterContainer, importStatements));
    });
    const code = lines.join('\n');
    return code;
}
function checkWhetherIsImport(configValueSource) {
    const { valueIsImportedAtRuntime, valueIsFilePath } = configValueSource;
    return valueIsImportedAtRuntime && !valueIsFilePath;
}
function isEnvMatch(configEnv, isImport, runtime) {
    // Whether config value is imported or serialized
    if (isImport !== runtime.isImport)
        return false;
    // Runtime match
    const { isForClientSide, isClientRouting } = runtime;
    if (!(0, isRuntimeEnvMatch_js_1.isRuntimeEnvMatch)(configEnv, { isForClientSide, isClientRouting, isEager: false }))
        return false;
    return true;
}
