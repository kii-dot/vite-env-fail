"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getVirtualFilePageConfigs = void 0;
const utils_js_1 = require("../../../utils.js");
const virtualFilePageConfigValuesAll_js_1 = require("../../../../shared/virtual-files/virtualFilePageConfigValuesAll.js");
const debug_js_1 = require("./debug.js");
const getVikeConfig_js_1 = require("./getVikeConfig.js");
const isRuntimeEnvMatch_js_1 = require("./isRuntimeEnvMatch.js");
const serializeConfigValue_js_1 = require("../../../../../shared/page-configs/serialize/serializeConfigValue.js");
const getConfigValuesSerialized_js_1 = require("./getConfigValuesSerialized.js");
async function getVirtualFilePageConfigs(isForClientSide, isDev, id, isClientRouting, config) {
    const { pageConfigs, pageConfigGlobal } = await (0, getVikeConfig_js_1.getVikeConfig)(config, isDev, true);
    return getCode(pageConfigs, pageConfigGlobal, isForClientSide, isDev, id, isClientRouting);
}
exports.getVirtualFilePageConfigs = getVirtualFilePageConfigs;
function getCode(pageConfigs, pageConfigGlobal, isForClientSide, isDev, id, isClientRouting) {
    const lines = [];
    const importStatements = [];
    const varCounterContainer = { varCounter: 0 };
    lines.push('export const pageConfigsSerialized = [');
    lines.push(getCodePageConfigsSerialized(pageConfigs, isForClientSide, isClientRouting, importStatements, varCounterContainer));
    lines.push('];');
    lines.push('export const pageConfigGlobalSerialized = {');
    lines.push(getCodePageConfigGlobalSerialized(pageConfigGlobal, isForClientSide, isDev, importStatements, varCounterContainer));
    lines.push('};');
    const code = [...importStatements, ...lines].join('\n');
    (0, debug_js_1.debug)(id, isForClientSide ? 'CLIENT-SIDE' : 'SERVER-SIDE', code);
    return code;
}
function getCodePageConfigsSerialized(pageConfigs, isForClientSide, isClientRouting, importStatements, varCounterContainer) {
    const lines = [];
    pageConfigs.forEach((pageConfig) => {
        const { pageId, routeFilesystem, isErrorPage } = pageConfig;
        const virtualFileIdPageConfigValuesAll = (0, virtualFilePageConfigValuesAll_js_1.getVirtualFileIdPageConfigValuesAll)(pageId, isForClientSide);
        lines.push(`  {`);
        lines.push(`    pageId: ${JSON.stringify(pageId)},`);
        lines.push(`    isErrorPage: ${JSON.stringify(isErrorPage)},`);
        lines.push(`    routeFilesystem: ${JSON.stringify(routeFilesystem)},`);
        lines.push(`    loadConfigValuesAll: () => import(${JSON.stringify(virtualFileIdPageConfigValuesAll)}),`);
        // Serialized config values
        lines.push(`    configValuesSerialized: {`);
        lines.push((0, getConfigValuesSerialized_js_1.getConfigValuesSerialized)(pageConfig, (configEnv) => (0, isRuntimeEnvMatch_js_1.isRuntimeEnvMatch)(configEnv, { isForClientSide, isClientRouting, isEager: true })));
        lines.push(`    },`);
        // Imported config values
        const whitespace = '    ';
        lines.push(`${whitespace}configValuesImported: [`);
        Object.entries(pageConfig.configValueSources).forEach(([configName, sources]) => {
            const configValue = pageConfig.configValues[configName];
            if (configValue)
                return;
            const configValueSource = sources[0];
            (0, utils_js_1.assert)(configValueSource);
            if (!configValueSource.configEnv.eager)
                return;
            lines.push(...(0, serializeConfigValue_js_1.serializeConfigValueImported)(configValueSource, configName, whitespace, varCounterContainer, importStatements));
        });
        lines.push(`${whitespace}],`);
        lines.push(`  },`);
    });
    const code = lines.join('\n');
    return code;
}
function getCodePageConfigGlobalSerialized(pageConfigGlobal, isForClientSide, isDev, importStatements, varCounterContainer) {
    const lines = [];
    /* Nothing (yet)
    lines.push(`  configValuesSerialized: {`)
    lines.push(`  },`)
    */
    lines.push(`  configValuesImported: [`);
    (0, utils_js_1.objectEntries)(pageConfigGlobal.configValueSources).forEach(([configName, sources]) => {
        if (configName === 'onBeforeRoute') {
            // if( isForClientSide && !isClientRouting ) return
        }
        else if (configName === 'onPrerenderStart') {
            if (isDev || isForClientSide) {
                // Only load onPrerenderStart() in server production runtime
                return;
            }
        }
        else {
            (0, utils_js_1.assert)(false);
        }
        const configValueSource = sources[0];
        (0, utils_js_1.assert)(configValueSource);
        const whitespace = '    ';
        lines.push(...(0, serializeConfigValue_js_1.serializeConfigValueImported)(configValueSource, configName, whitespace, varCounterContainer, importStatements));
    });
    lines.push(`  ],`);
    const code = lines.join('\n');
    return code;
}
