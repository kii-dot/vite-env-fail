"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.executeOnBeforeRenderAndDataHooks = void 0;
const getHook_js_1 = require("../../../shared/hooks/getHook.js");
const preparePageContextForUserConsumptionServerSide_js_1 = require("./preparePageContextForUserConsumptionServerSide.js");
const utils_js_1 = require("../utils.js");
const assertOnBeforeRenderHookReturn_js_1 = require("../../../shared/assertOnBeforeRenderHookReturn.js");
async function executeOnBeforeRenderAndDataHooks(pageContext) {
    if (pageContext._pageContextAlreadyProvidedByOnPrerenderHook) {
        return;
    }
    const dataHook = (0, getHook_js_1.getHook)(pageContext, 'data');
    const onBeforeRenderHook = (0, getHook_js_1.getHook)(pageContext, 'onBeforeRender');
    if (!dataHook && !onBeforeRenderHook) {
        return;
    }
    (0, preparePageContextForUserConsumptionServerSide_js_1.preparePageContextForUserConsumptionServerSide)(pageContext);
    if (dataHook) {
        const hookResult = await (0, utils_js_1.executeHook)(() => dataHook.hookFn(pageContext), dataHook);
        // Note: hookResult can be anything (e.g. an object) and is to be assigned to pageContext.data
        const pageContextFromHook = {
            data: hookResult
        };
        Object.assign(pageContext, pageContextFromHook);
    }
    if (onBeforeRenderHook) {
        const hookResult = await (0, utils_js_1.executeHook)(() => onBeforeRenderHook.hookFn(pageContext), onBeforeRenderHook);
        (0, assertOnBeforeRenderHookReturn_js_1.assertOnBeforeRenderHookReturn)(hookResult, onBeforeRenderHook.hookFilePath);
        const pageContextFromHook = hookResult?.pageContext;
        Object.assign(pageContext, pageContextFromHook);
    }
}
exports.executeOnBeforeRenderAndDataHooks = executeOnBeforeRenderAndDataHooks;
