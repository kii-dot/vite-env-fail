"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfigValue = void 0;
const utils_js_1 = require("../../utils.js");
const picocolors_1 = __importDefault(require("@brillout/picocolors"));
const getConfigDefinedAtString_js_1 = require("./getConfigDefinedAtString.js");
// prettier-ignore
function getConfigValue(pageConfig, configName, type) {
    const configValue = getConfigValueEntry(pageConfig, configName);
    if (configValue === null)
        return null;
    const { value, definedAt } = configValue;
    if (type)
        assertConfigValueType(value, type, configName, definedAt);
    return configValue;
}
exports.getConfigValue = getConfigValue;
function assertConfigValueType(value, type, configName, definedAt) {
    (0, utils_js_1.assert)(value !== null);
    const typeActual = typeof value;
    if (typeActual === type)
        return;
    const valuePrintable = (0, utils_js_1.getValuePrintable)(value);
    const problem = valuePrintable !== null
        ? `value ${picocolors_1.default.cyan(valuePrintable)}`
        : `type ${picocolors_1.default.cyan(typeActual)}`;
    const configDefinedAt = (0, getConfigDefinedAtString_js_1.getConfigDefinedAtString)('Config', configName, {
        definedAt
    });
    const errMsg = `${configDefinedAt} has an invalid ${problem}: it should be a ${picocolors_1.default.cyan(type)} instead`;
    (0, utils_js_1.assertUsage)(false, errMsg);
}
function getConfigValueEntry(pageConfig, configName) {
    const configValue = pageConfig.configValues[configName];
    if (!configValue)
        return null;
    // Enable users to suppress global config values by setting the local config value to null
    if (configValue.value === null)
        return null;
    return configValue;
}
