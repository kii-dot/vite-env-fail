"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parsePageConfigs = void 0;
const parseConfigValuesImported_js_1 = require("./parseConfigValuesImported.js");
const utils_js_1 = require("../../utils.js");
const helpers_js_1 = require("../helpers.js");
const parseConfigValuesSerialized_js_1 = require("./parseConfigValuesSerialized.js");
function parsePageConfigs(pageConfigsSerialized, pageConfigGlobalSerialized) {
    const pageConfigs = pageConfigsSerialized.map((pageConfigSerialized) => {
        const configValues = {};
        {
            const { configValuesSerialized } = pageConfigSerialized;
            const configValuesAddendum = (0, parseConfigValuesSerialized_js_1.parseConfigValuesSerialized)(configValuesSerialized);
            Object.assign(configValues, configValuesAddendum);
        }
        {
            const { configValuesImported } = pageConfigSerialized;
            const configValuesAddendum = (0, parseConfigValuesImported_js_1.parseConfigValuesImported)(configValuesImported);
            Object.assign(configValues, configValuesAddendum);
        }
        const { pageId, isErrorPage, routeFilesystem, loadConfigValuesAll } = pageConfigSerialized;
        assertRouteConfigValue(configValues);
        return {
            pageId,
            isErrorPage,
            routeFilesystem,
            configValues,
            loadConfigValuesAll
        };
    });
    const pageConfigGlobal = { configValues: {} };
    {
        const configValuesAddendum = (0, parseConfigValuesImported_js_1.parseConfigValuesImported)(pageConfigGlobalSerialized.configValuesImported);
        Object.assign(pageConfigGlobal.configValues, configValuesAddendum);
    }
    return { pageConfigs, pageConfigGlobal };
}
exports.parsePageConfigs = parsePageConfigs;
function assertRouteConfigValue(configValues) {
    const configName = 'route';
    const configValue = configValues[configName];
    if (!configValue)
        return;
    const { value } = configValue;
    const configValueType = typeof value;
    const configDefinedAt = (0, helpers_js_1.getConfigDefinedAtString)('Config', configName, configValue);
    (0, utils_js_1.assertUsage)(configValueType === 'string' || (0, utils_js_1.isCallable)(value), `${configDefinedAt} has an invalid type '${configValueType}': it should be a string or a function instead, see https://vike.dev/route`);
    /* We don't use assertRouteString() in order to avoid unnecessarily bloating the client-side bundle when using Server Routing:
    * - When using Server Routing, this file is loaded => loading assertRouteString() would bloat the client bundle.
    * - assertRouteString() is already called on the server-side
    * - When using Server Routing, client-side validation is superfluous as Route Strings only need to be validated on the server-side
   if (typeof configValue === 'string') {
     assertRouteString(configValue, `${configElement.configDefinedAt} defines an`)
   }
   */
}
