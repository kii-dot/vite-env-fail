"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeConfigValueImported = exports.serializeConfigValue = void 0;
// This file is never loaded on the client-side but we save it under the vike/shared/ directory in order to collocate it with:
//   - vike/shared/page-configs/serialize/parsePageConfigs.ts
//   - vike/shared/page-configs/serialize/parseConfigValuesImported.ts
// Both parsePageConfigs() parseConfigValuesImported() and are loaded on the client-side and server-side
const assertIsNotProductionRuntime_js_1 = require("../../../utils/assertIsNotProductionRuntime.js");
(0, assertIsNotProductionRuntime_js_1.assertIsNotProductionRuntime)();
const path_1 = __importDefault(require("path"));
const utils_js_1 = require("../../utils.js");
const generateEagerImport_js_1 = require("../../../node/plugin/plugins/importUserCode/generateEagerImport.js");
function serializeConfigValue(lines, configName, configValueSerialized) {
    let whitespace = '      ';
    lines.push(`${whitespace}['${configName}']: {`);
    whitespace += '  ';
    Object.entries(configValueSerialized).forEach(([key, val]) => {
        const valSerialized = key === 'definedAt' ? JSON.stringify(val) : val;
        lines.push(`${whitespace}  ${key}: ${valSerialized},`);
    });
    whitespace = whitespace.slice(2);
    lines.push(`${whitespace}},`);
}
exports.serializeConfigValue = serializeConfigValue;
function serializeConfigValueImported(configValueSource, configName, whitespace, varCounterContainer, importStatements) {
    (0, utils_js_1.assert)(!configValueSource.valueIsFilePath);
    (0, utils_js_1.assert)(whitespace.replaceAll(' ', '').length === 0);
    const { valueIsImportedAtRuntime, definedAt } = configValueSource;
    (0, utils_js_1.assert)(valueIsImportedAtRuntime);
    const { filePathAbsoluteVite, fileExportName } = definedAt;
    (0, utils_js_1.assertPosixPath)(filePathAbsoluteVite);
    const fileName = path_1.default.posix.basename(filePathAbsoluteVite);
    const isValueFile = fileName.startsWith('+');
    if (isValueFile)
        (0, utils_js_1.assert)(fileExportName === undefined);
    const { importName, importStatement } = (0, generateEagerImport_js_1.generateEagerImport)(filePathAbsoluteVite, varCounterContainer.varCounter++, fileExportName);
    importStatements.push(importStatement);
    const lines = [];
    lines.push(`  {`);
    lines.push(`    configName: '${configName}',`);
    lines.push(`    importPath: '${filePathAbsoluteVite}',`);
    lines.push(`    isValueFile: ${JSON.stringify(isValueFile)},`);
    if (isValueFile) {
        lines.push(`    exportValues: ${importName},`);
    }
    else {
        lines.push(`    exportValue: ${importName},`);
        (0, utils_js_1.assert)(fileExportName);
        lines.push(`    exportName: ${JSON.stringify(fileExportName)},`);
    }
    lines.push(`  },`);
    return lines;
}
exports.serializeConfigValueImported = serializeConfigValueImported;
