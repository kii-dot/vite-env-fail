// Logger used for the production server.
// Any other environement (dev, preview, build, and pre-rendering) uses loggerNotProd.ts instead.
export { logErrorProd };
export { onRuntimeError };
import { isAbortError } from '../../../shared/route/abort.js';
import { setAlreadyLogged } from './isNewError.js';
import { isObject, warnIfErrorIsNotObject } from '../utils.js';
import pc from '@brillout/picocolors';
import { logHintForCjsEsmError } from './logHintForCjsEsmError.js';
function logErrorProd(err, _httpRquestId) {
    warnIfErrorIsNotObject(err);
    setAlreadyLogged(err);
    if (isAbortError(err)) {
        return;
    }
    // We ensure we print a string; Cloudflare Workers doesn't seem to properly stringify `Error` objects.
    const errStr = isObject(err) && 'stack' in err ? String(err.stack) : String(err);
    console.error(pc.red(errStr));
    onRuntimeError(err);
}
// Every server-side runtime error is expected to go through onRuntimeError(). (In principle, any runtime error is (or at least should) be catched by Vike, otherwise Vike couldn't render the error page.)
function onRuntimeError(err) {
    // The more runtime errors we pass to logHintForCjsEsmError() the better.
    logHintForCjsEsmError(err);
}
