// src/index.ts
import fs4 from "fs/promises";

// src/utils.ts
import { normalizePath } from "vite";
import path from "path";
function getRoot(config) {
  return normalizePath(config.root || process.cwd());
}
function getOutput(config, suffix) {
  var _a, _b;
  return path.join(
    ((_a = config.vercel) == null ? void 0 : _a.outDir) ? "" : getRoot(config),
    ((_b = config.vercel) == null ? void 0 : _b.outDir) ?? ".vercel/output",
    suffix ?? ""
  );
}
function getPublic(config) {
  return path.join(getRoot(config), config.publicDir || "public");
}
function pathRelativeTo(filePath, config, rel) {
  const root = getRoot(config);
  return normalizePath(
    path.relative(normalizePath(path.join(root, rel)), filePath)
  );
}

// src/config.ts
import path2 from "path";

// src/schemas/config/config.ts
import { z } from "zod";
var HasOrMissing = z.array(
  z.union([
    z.object({
      type: z.literal("host"),
      value: z.string()
    }).strict(),
    z.object({
      type: z.literal("header"),
      key: z.string(),
      value: z.string().optional()
    }).strict(),
    z.object({
      type: z.literal("cookie"),
      key: z.string(),
      value: z.string().optional()
    }).strict(),
    z.object({
      type: z.literal("query"),
      key: z.string(),
      value: z.string().optional()
    }).strict()
  ])
).optional();
var vercelOutputConfigSchema = z.object({
  version: z.literal(3),
  routes: z.array(
    z.union([
      z.object({
        src: z.string(),
        dest: z.string().optional(),
        headers: z.record(z.string()).optional(),
        methods: z.array(z.string()).optional(),
        status: z.number().int().positive().optional(),
        continue: z.boolean().optional(),
        check: z.boolean().optional(),
        missing: HasOrMissing,
        has: HasOrMissing,
        locale: z.object({
          redirect: z.record(z.string()).optional(),
          cookie: z.string().optional()
        }).strict().optional(),
        middlewarePath: z.string().optional()
      }).strict(),
      z.object({
        handle: z.union([
          z.literal("rewrite"),
          z.literal("filesystem"),
          z.literal("resource"),
          z.literal("miss"),
          z.literal("hit"),
          z.literal("error")
        ]),
        src: z.string().optional(),
        dest: z.string().optional(),
        status: z.number().optional()
      }).strict()
    ])
  ).optional(),
  images: z.object({
    sizes: z.tuple([
      z.number().int().positive(),
      z.number().int().positive()
    ]),
    domains: z.array(z.string()).nonempty().optional(),
    minimumCacheTTL: z.number().int().positive().optional(),
    formats: z.union([z.literal("image/avif"), z.literal("image/webp")]).array().nonempty().optional(),
    dangerouslyAllowSVG: z.boolean().optional(),
    contentSecurityPolicy: z.string().optional()
  }).strict().optional(),
  wildcard: z.array(
    z.object({
      domain: z.string(),
      value: z.string()
    }).strict()
  ).optional(),
  overrides: z.record(
    z.object({
      path: z.string().optional(),
      contentType: z.string().optional()
    }).strict()
  ).optional(),
  cache: z.array(z.string()).optional()
}).strict();

// src/config.ts
import fs from "fs/promises";
import {
  getTransformedRoutes,
  mergeRoutes,
  normalizeRoutes
} from "@vercel/routing-utils";
function reorderEnforce(arr) {
  return [
    ...arr.filter((r) => r.enforce === "pre"),
    ...arr.filter((r) => !r.enforce),
    ...arr.filter((r) => r.enforce === "post")
  ];
}
function getConfig(resolvedConfig, rewrites, overrides, headers) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;
  const _rewrites = [
    // User provided config always comes first
    ...((_a = resolvedConfig.vercel) == null ? void 0 : _a.rewrites) ?? [],
    ...rewrites ?? []
  ];
  const { routes, error } = getTransformedRoutes({
    cleanUrls: ((_b = resolvedConfig.vercel) == null ? void 0 : _b.cleanUrls) ?? true,
    trailingSlash: (_c = resolvedConfig.vercel) == null ? void 0 : _c.trailingSlash,
    rewrites: reorderEnforce(_rewrites),
    redirects: ((_d = resolvedConfig.vercel) == null ? void 0 : _d.redirects) ? reorderEnforce((_e = resolvedConfig.vercel) == null ? void 0 : _e.redirects) : void 0,
    headers
  });
  if (error) {
    throw error;
  }
  if (((_g = (_f = resolvedConfig.vercel) == null ? void 0 : _f.config) == null ? void 0 : _g.routes) && resolvedConfig.vercel.config.routes.length > 0 && !resolvedConfig.vercel.config.routes.every(
    (r) => "continue" in r && r.continue
  )) {
    console.warn(
      'Did you forget to add `"continue": true` to your routes? See https://vercel.com/docs/build-output-api/v3/configuration#source-route\nIf not, it is discouraged to use `vercel.config.routes` to override routes. Prefer using `vercel.rewrites` and `vercel.redirects`.'
    );
  }
  let userRoutes = [];
  let buildRoutes = [];
  if ((_i = (_h = resolvedConfig.vercel) == null ? void 0 : _h.config) == null ? void 0 : _i.routes) {
    const norm = normalizeRoutes(resolvedConfig.vercel.config.routes);
    if (norm.error) {
      throw norm.error;
    }
    userRoutes = norm.routes ?? [];
  }
  if (routes) {
    const norm = normalizeRoutes(routes);
    if (norm.error) {
      throw norm.error;
    }
    buildRoutes = norm.routes ?? [];
  }
  const cleanRoutes = mergeRoutes({
    userRoutes,
    builds: [
      {
        use: "@vercel/node",
        entrypoint: "index.js",
        routes: buildRoutes
      }
    ]
  });
  return vercelOutputConfigSchema.parse({
    version: 3,
    ...(_j = resolvedConfig.vercel) == null ? void 0 : _j.config,
    routes: cleanRoutes,
    overrides: {
      ...(_l = (_k = resolvedConfig.vercel) == null ? void 0 : _k.config) == null ? void 0 : _l.overrides,
      ...overrides
    }
  });
}
function getConfigDestination(resolvedConfig) {
  return path2.join(getOutput(resolvedConfig), "config.json");
}
async function writeConfig(resolvedConfig, rewrites, overrides, headers) {
  await fs.writeFile(
    getConfigDestination(resolvedConfig),
    JSON.stringify(
      getConfig(resolvedConfig, rewrites, overrides, headers),
      void 0,
      2
    ),
    "utf-8"
  );
}

// src/build.ts
import glob from "fast-glob";
import path3, { basename, dirname } from "path";
import { build } from "esbuild";

// src/assert.ts
import { newError } from "@brillout/libassert";
var libName = "vite-plugin-vercel";
function assert(condition, errorMessage) {
  if (condition) {
    return;
  }
  const err = newError(`[${libName}][Wrong Usage] ${errorMessage}`, 2);
  throw err;
}

// src/schemas/config/vc-config.ts
import { z as z2 } from "zod";
var vercelOutputEdgeVcConfigSchema = z2.object({
  runtime: z2.literal("edge"),
  entrypoint: z2.string(),
  envVarsInUse: z2.array(z2.string()).optional()
}).strict();
var vercelOutputServerlessVcConfigSchema = z2.object({
  runtime: z2.string(),
  handler: z2.string(),
  memory: z2.number().int().min(128).max(3008).optional(),
  maxDuration: z2.number().int().positive().optional(),
  environment: z2.record(z2.string()).optional(),
  regions: z2.array(z2.string()).optional()
}).strict();
var vercelOutputServerlessNodeVcConfigSchema = vercelOutputServerlessVcConfigSchema.extend({
  launcherType: z2.literal("Nodejs"),
  shouldAddHelpers: z2.boolean().optional(),
  shouldAddSourcemapSupport: z2.boolean().optional(),
  awsLambdaHandler: z2.string().optional()
}).strict();
var vercelOutputVcConfigSchema = z2.union([
  vercelOutputEdgeVcConfigSchema,
  vercelOutputServerlessVcConfigSchema,
  vercelOutputServerlessNodeVcConfigSchema
]);

// src/build.ts
import fs2, { copyFile } from "fs/promises";
import _eval from "eval";

// src/schemas/exports.ts
import { z as z3 } from "zod";
var vercelEndpointExports = z3.object({
  edge: z3.boolean().optional(),
  headers: z3.record(z3.string()).optional(),
  isr: z3.object({
    expiration: z3.number().or(z3.literal(false))
  }).optional()
});

// src/build.ts
import { generateCode, loadFile } from "magicast";
import { getNodeVersion } from "@vercel/build-utils";
function getAdditionalEndpoints(resolvedConfig) {
  var _a;
  return (((_a = resolvedConfig.vercel) == null ? void 0 : _a.additionalEndpoints) ?? []).map((e) => ({
    ...e,
    addRoute: e.addRoute ?? true,
    // path.resolve removes the trailing slash if any
    destination: path3.posix.resolve("/", e.destination) + ".func"
  }));
}
function getEntries(resolvedConfig) {
  const apiEntries = glob.sync(`${getRoot(resolvedConfig)}/api/**/*.*([a-zA-Z0-9])`).filter((filepath) => !path3.basename(filepath).startsWith("_"));
  if (apiEntries.length > 0) {
    console.warn(
      "@vercel/build is currently force building /api files itself, with no way to disable it. In order to avoid double compilation, you should temporarily rename /api to /_api while using this plugin. /_api functions are compiled under .vercel/output/functions/api/*.func as if they were in /api."
    );
  }
  const otherApiEntries = glob.sync(`${getRoot(resolvedConfig)}/_api/**/*.*([a-zA-Z0-9])`).filter((filepath) => !path3.basename(filepath).startsWith("_"));
  return [...apiEntries, ...otherApiEntries].reduce((entryPoints, filePath) => {
    const outFilePath = pathRelativeTo(
      filePath,
      resolvedConfig,
      filePath.includes("/_api/") ? "_api" : "api"
    );
    const parsed = path3.posix.parse(outFilePath);
    entryPoints.push({
      source: filePath,
      destination: `api/${path3.posix.join(parsed.dir, parsed.name)}.func`,
      addRoute: true
    });
    return entryPoints;
  }, getAdditionalEndpoints(resolvedConfig));
}
var wasmPlugin = {
  name: "wasm",
  setup(build2) {
    build2.onResolve({ filter: /\.wasm/ }, (args) => {
      return {
        path: args.path.replace(/\.wasm\?module$/i, ".wasm"),
        external: true
      };
    });
  }
};
var vercelOgPlugin = (ctx) => {
  return {
    name: "vercel-og",
    setup(build2) {
      build2.onResolve({ filter: /@vercel\/og/ }, () => {
        ctx.found = true;
        return void 0;
      });
      build2.onLoad({ filter: /@vercel\/og/ }, (args) => {
        ctx.index = args.path;
        return void 0;
      });
    }
  };
};
var standardBuildOptions = {
  bundle: true,
  target: "es2020",
  format: "cjs",
  platform: "node",
  logLevel: "info",
  logOverride: {
    "ignored-bare-import": "verbose",
    "require-resolve-not-external": "verbose"
  },
  minify: true,
  plugins: [wasmPlugin]
};
async function buildFn(resolvedConfig, entry, buildOptions) {
  assert(
    entry.destination.length > 0,
    `Endpoint ${typeof entry.source === "string" ? entry.source : "-"} does not have build destination`
  );
  const outfile = path3.join(
    getOutput(resolvedConfig, "functions"),
    entry.destination,
    "index.js"
  );
  const options = Object.assign({}, standardBuildOptions, { outfile });
  if (buildOptions) {
    Object.assign(options, buildOptions);
  }
  if (!options.stdin) {
    if (typeof entry.source === "string") {
      options.entryPoints = [entry.source];
    } else {
      assert(
        typeof entry.source === "object",
        `\`{ source }\` must be a string or an object`
      );
      assert(
        typeof entry.source.contents === "string",
        `\`{ contents }\` must be a string`
      );
      options.stdin = entry.source;
    }
  }
  if (entry.edge) {
    options.conditions = [
      "edge-light",
      "browser",
      "module",
      "import",
      "require"
    ];
    options.format = "esm";
  }
  const ctx = { found: false, index: "" };
  options.plugins.push(vercelOgPlugin(ctx));
  const output = await build(options);
  if (ctx.found && ctx.index) {
    const dir = dirname(ctx.index);
    const externalFiles = await glob(`${dir}/*.{ttf,wasm}`);
    for (const f of externalFiles) {
      await copyFile(
        f,
        path3.join(
          getOutput(resolvedConfig, "functions"),
          entry.destination,
          basename(f)
        )
      );
    }
  }
  await writeVcConfig(resolvedConfig, entry.destination, Boolean(entry.edge));
  return output;
}
async function writeVcConfig(resolvedConfig, destination, edge) {
  var _a;
  const vcConfig = path3.join(
    getOutput(resolvedConfig, "functions"),
    destination,
    ".vc-config.json"
  );
  const nodeVersion = await getNodeVersion(getOutput(resolvedConfig));
  await fs2.writeFile(
    vcConfig,
    JSON.stringify(
      vercelOutputVcConfigSchema.parse(
        edge ? {
          runtime: "edge",
          entrypoint: "index.js"
        } : {
          runtime: nodeVersion.runtime,
          handler: "index.js",
          maxDuration: (_a = resolvedConfig.vercel) == null ? void 0 : _a.defaultMaxDuration,
          launcherType: "Nodejs",
          shouldAddHelpers: true
        }
      ),
      void 0,
      2
    ),
    "utf-8"
  );
}
function getSourceAndDestination(destination) {
  if (destination.startsWith("api/")) {
    return path3.posix.resolve("/", destination);
  }
  return path3.posix.resolve("/", destination, ":match*");
}
async function removeDefaultExport(filepath) {
  const mod = await loadFile(filepath);
  try {
    delete mod.exports.default;
  } catch (_) {
  }
  return generateCode(mod).code;
}
async function extractExports(filepath) {
  var _a;
  const contents = await removeDefaultExport(filepath);
  const buildOptions = {
    ...standardBuildOptions,
    minify: false,
    write: false,
    legalComments: "none"
  };
  buildOptions.stdin = {
    sourcefile: filepath,
    contents,
    loader: filepath.endsWith(".ts") ? "ts" : filepath.endsWith(".tsx") ? "tsx" : filepath.endsWith(".js") ? "js" : filepath.endsWith(".jsx") ? "jsx" : "default",
    resolveDir: dirname(filepath)
  };
  try {
    const output = await build(buildOptions);
    const bundle = new TextDecoder().decode((_a = output.outputFiles[0]) == null ? void 0 : _a.contents);
    return vercelEndpointExports.parse(_eval(bundle, filepath, {}, true));
  } catch (e) {
    console.warn(`Warning: failed to read exports of '${filepath}'`, e);
  }
}
async function buildEndpoints(resolvedConfig) {
  const entries = getEntries(resolvedConfig);
  for (const entry of entries) {
    if (typeof entry.source === "string") {
      const exports = await extractExports(entry.source);
      if (exports) {
        if (entry.headers || exports.headers) {
          entry.headers = {
            ...exports.headers,
            ...entry.headers
          };
        }
        if (entry.edge !== void 0 && exports.edge !== void 0) {
          throw new Error(
            `edge configuration should be defined either in the endpoint itself or through Vite config, not both ('${entry.source}')`
          );
        }
        if (exports.edge !== void 0) {
          entry.edge = exports.edge;
        }
        if (entry.isr !== void 0 && exports.isr !== void 0) {
          throw new Error(
            `isr configuration should be defined either in the endpoint itself or through Vite config, not both ('${entry.source}')`
          );
        }
        if (exports.isr) {
          entry.isr = exports.isr;
        }
      }
    }
    await buildFn(resolvedConfig, entry);
  }
  const isrEntries = entries.filter((e) => e.isr).map(
    (e) => [
      e.destination.replace(/\.func$/, ""),
      { expiration: e.isr.expiration }
    ]
  );
  return {
    rewrites: entries.filter((e) => e.addRoute !== false).map((e) => e.destination.replace(/\.func$/, "")).map((destination) => ({
      source: getSourceAndDestination(destination),
      destination: getSourceAndDestination(destination)
    })),
    isr: Object.fromEntries(isrEntries),
    headers: entries.filter((e) => e.headers).map((e) => ({
      source: "/" + e.destination.replace(/\.func$/, ""),
      headers: Object.entries(e.headers).map(([key, value]) => ({
        key,
        value
      }))
    }))
  };
}

// src/prerender.ts
import path4 from "path";

// src/schemas/config/prerender-config.ts
import { z as z4 } from "zod";
var vercelOutputPrerenderConfigSchema = z4.object({
  expiration: z4.union([z4.number().int().positive(), z4.literal(false)]),
  group: z4.number().int().optional(),
  bypassToken: z4.string().optional(),
  fallback: z4.string().optional(),
  allowQuery: z4.array(z4.string()).optional()
}).strict();

// src/prerender.ts
import fs3 from "fs/promises";
function execPrerender(resolvedConfig) {
  var _a;
  const prerender = (_a = resolvedConfig.vercel) == null ? void 0 : _a.prerender;
  if (prerender === false) {
    return;
  }
  return prerender == null ? void 0 : prerender(resolvedConfig);
}
var group = 1;
async function writePrerenderConfig(resolvedConfig, destination, isr) {
  const parsed = path4.parse(destination);
  const outfile = path4.join(
    getOutput(resolvedConfig, "functions"),
    parsed.dir,
    parsed.name + ".prerender-config.json"
  );
  await fs3.mkdir(
    path4.join(getOutput(resolvedConfig, "functions"), parsed.dir),
    { recursive: true }
  );
  await fs3.writeFile(
    outfile,
    JSON.stringify(
      vercelOutputPrerenderConfigSchema.parse({
        group: group++,
        ...isr
      }),
      void 0,
      2
    ),
    "utf-8"
  );
}
function getPrerenderSymlinkInfo(resolvedConfig, destination, target) {
  const parsed = path4.parse(destination);
  const targetParsed = path4.parse(target);
  return {
    target: path4.join(
      getOutput(resolvedConfig, "functions"),
      targetParsed.dir,
      targetParsed.name + ".func"
    ),
    link: path4.join(
      getOutput(resolvedConfig, "functions"),
      parsed.dir,
      parsed.name + ".func"
    )
  };
}
async function buildPrerenderConfigs(resolvedConfig, extractedIsr) {
  const isr = Object.assign(
    {},
    extractedIsr,
    await getIsrConfig(resolvedConfig)
  );
  const entries = Object.entries(isr);
  const rewrites = [];
  for (const [destination, { symlink, route, ...isr2 }] of entries) {
    await writePrerenderConfig(resolvedConfig, destination, isr2);
    if (symlink) {
      const info = getPrerenderSymlinkInfo(
        resolvedConfig,
        destination,
        symlink
      );
      await copyDir(info.target, info.link);
    }
    if (route) {
      rewrites.push({
        source: `(${route})`,
        destination: `${destination}/?__original_path=$1`
      });
    }
  }
  return rewrites;
}
async function copyDir(src, dest) {
  await fs3.mkdir(dest, { recursive: true });
  const entries = await fs3.readdir(src, { withFileTypes: true });
  for (const entry of entries) {
    const srcPath = path4.join(src, entry.name);
    const destPath = path4.join(dest, entry.name);
    entry.isDirectory() ? await copyDir(srcPath, destPath) : await fs3.copyFile(srcPath, destPath);
  }
}
async function getIsrConfig(resolvedConfig) {
  var _a;
  const isr = ((_a = resolvedConfig.vercel) == null ? void 0 : _a.isr) ?? {};
  if (typeof isr === "function") {
    return await isr();
  }
  return isr;
}

// src/index.ts
import path5 from "path";
function vercelPlugin() {
  let resolvedConfig;
  let vikeFound = false;
  return {
    apply: "build",
    name: "vite-plugin-vercel",
    enforce: "post",
    configResolved(config) {
      resolvedConfig = config;
      vikeFound = resolvedConfig.plugins.some(
        (p) => p.name.match("^vite-plugin-ssr:|^vike:")
      );
    },
    async writeBundle() {
      var _a;
      if (!((_a = resolvedConfig.build) == null ? void 0 : _a.ssr)) {
        await cleanOutputDirectory(resolvedConfig);
        if (vikeFound) {
          return;
        }
      }
      const overrides = await execPrerender(resolvedConfig);
      const userOverrides = await computeStaticHtmlOverrides(resolvedConfig);
      const { rewrites, isr, headers } = await buildEndpoints(resolvedConfig);
      rewrites.push(...await buildPrerenderConfigs(resolvedConfig, isr));
      await writeConfig(
        resolvedConfig,
        rewrites,
        {
          ...userOverrides,
          ...overrides
        },
        headers
      );
    }
  };
}
async function cleanOutputDirectory(resolvedConfig) {
  await fs4.rm(getOutput(resolvedConfig), {
    recursive: true,
    force: true
  });
  await fs4.mkdir(getOutput(resolvedConfig), { recursive: true });
}
async function computeStaticHtmlOverrides(resolvedConfig) {
  const staticAbsolutePath = getOutput(resolvedConfig, "static");
  const files = await getStaticHtmlFiles(staticAbsolutePath);
  const publicDir = getPublic(resolvedConfig);
  const publicFiles = await getStaticHtmlFiles(publicDir);
  files.push(
    ...publicFiles.map((f) => f.replace(publicDir, staticAbsolutePath))
  );
  return files.reduce((acc, curr) => {
    const relPath = path5.relative(staticAbsolutePath, curr);
    const parsed = path5.parse(relPath);
    const pathJoined = path5.join(parsed.dir, parsed.name);
    acc[relPath] = {
      path: pathJoined
    };
    return acc;
  }, {});
}
async function getStaticHtmlFiles(src) {
  try {
    await fs4.stat(src);
  } catch (e) {
    return [];
  }
  const entries = await fs4.readdir(src, { withFileTypes: true });
  const htmlFiles = [];
  for (const entry of entries) {
    const srcPath = path5.join(src, entry.name);
    entry.isDirectory() ? htmlFiles.push(...await getStaticHtmlFiles(srcPath)) : srcPath.endsWith(".html") ? htmlFiles.push(srcPath) : void 0;
  }
  return htmlFiles;
}
async function tryImportVpvv() {
  try {
    await import("vike/plugin");
    const vpvv = await import("@vite-plugin-vercel/vike");
    return vpvv.default();
  } catch (e) {
    try {
      await import("vite-plugin-ssr/plugin");
      const vpvv = await import("@vite-plugin-vercel/vike");
      return vpvv.default();
    } catch (e2) {
      return null;
    }
  }
}
function allPlugins(options = {}) {
  return [vercelPlugin(), options.smart !== false ? tryImportVpvv() : null];
}
export {
  allPlugins as default
};
